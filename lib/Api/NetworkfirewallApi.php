<?php
/**
 * NetworkfirewallApi
 * PHP version 5
 *
 * @category Class
 * @package  csakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RESELLING.SERVICES API
 *
 * Auf folgender Seite finden Sie die Beschreibung der RESELLING.SERVICES Schnittstelle  <!--<a href=\"https://reselling.services/api-docs?lang=en\" title=\"Englische Dokumentation\">Dokumentation in Englisch</a>-->
 *
 * OpenAPI spec version: 1.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace csakel\RUBClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use csakel\RUBClient\ApiException;
use csakel\RUBClient\Configuration;
use csakel\RUBClient\HeaderSelector;
use csakel\RUBClient\ObjectSerializer;

/**
 * NetworkfirewallApi Class Doc Comment
 *
 * @category Class
 * @package  csakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworkfirewallApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation networkFirewallAssignPost
     *
     * @param  int $firewall_id firewall_id (required)
     * @param  string $vserver_id vserver_id (optional)
     * @param  bool $override override (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\NetworkFirewall[]
     */
    public function networkFirewallAssignPost($firewall_id, $vserver_id = null, $override = null)
    {
        list($response) = $this->networkFirewallAssignPostWithHttpInfo($firewall_id, $vserver_id, $override);
        return $response;
    }

    /**
     * Operation networkFirewallAssignPostWithHttpInfo
     *
     * @param  int $firewall_id (required)
     * @param  string $vserver_id (optional)
     * @param  bool $override (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\NetworkFirewall[], HTTP status code, HTTP response headers (array of strings)
     */
    public function networkFirewallAssignPostWithHttpInfo($firewall_id, $vserver_id = null, $override = null)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallAssignPostRequest($firewall_id, $vserver_id, $override);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\NetworkFirewall[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation networkFirewallAssignPostAsync
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  string $vserver_id (optional)
     * @param  bool $override (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallAssignPostAsync($firewall_id, $vserver_id = null, $override = null)
    {
        return $this->networkFirewallAssignPostAsyncWithHttpInfo($firewall_id, $vserver_id, $override)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkFirewallAssignPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  string $vserver_id (optional)
     * @param  bool $override (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallAssignPostAsyncWithHttpInfo($firewall_id, $vserver_id = null, $override = null)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallAssignPostRequest($firewall_id, $vserver_id, $override);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkFirewallAssignPost'
     *
     * @param  int $firewall_id (required)
     * @param  string $vserver_id (optional)
     * @param  bool $override (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function networkFirewallAssignPostRequest($firewall_id, $vserver_id = null, $override = null)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling networkFirewallAssignPost'
            );
        }

        $resourcePath = '/network/firewall/assign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($firewall_id !== null) {
            $queryParams['firewallId'] = ObjectSerializer::toQueryValue($firewall_id, null);
        }
        // query params
        if ($vserver_id !== null) {
            $queryParams['vserverId'] = ObjectSerializer::toQueryValue($vserver_id, null);
        }
        // query params
        if ($override !== null) {
            $queryParams['override'] = ObjectSerializer::toQueryValue($override, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkFirewallCopyPost
     *
     * @param  int $firewall_id firewall_id (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\NetworkFirewall[]
     */
    public function networkFirewallCopyPost($firewall_id)
    {
        list($response) = $this->networkFirewallCopyPostWithHttpInfo($firewall_id);
        return $response;
    }

    /**
     * Operation networkFirewallCopyPostWithHttpInfo
     *
     * @param  int $firewall_id (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\NetworkFirewall[], HTTP status code, HTTP response headers (array of strings)
     */
    public function networkFirewallCopyPostWithHttpInfo($firewall_id)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallCopyPostRequest($firewall_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\NetworkFirewall[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation networkFirewallCopyPostAsync
     *
     * 
     *
     * @param  int $firewall_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallCopyPostAsync($firewall_id)
    {
        return $this->networkFirewallCopyPostAsyncWithHttpInfo($firewall_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkFirewallCopyPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $firewall_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallCopyPostAsyncWithHttpInfo($firewall_id)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallCopyPostRequest($firewall_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkFirewallCopyPost'
     *
     * @param  int $firewall_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function networkFirewallCopyPostRequest($firewall_id)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling networkFirewallCopyPost'
            );
        }

        $resourcePath = '/network/firewall/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($firewall_id !== null) {
            $queryParams['firewallId'] = ObjectSerializer::toQueryValue($firewall_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkFirewallCreatePost
     *
     * @param  string $title title (required)
     * @param  string $policy_in Der Standardwert für eingehende Pakete (optional)
     * @param  string $policy_out Der Standardwert für ausgehende Pakete (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\NetworkFirewall[]
     */
    public function networkFirewallCreatePost($title, $policy_in = null, $policy_out = null)
    {
        list($response) = $this->networkFirewallCreatePostWithHttpInfo($title, $policy_in, $policy_out);
        return $response;
    }

    /**
     * Operation networkFirewallCreatePostWithHttpInfo
     *
     * @param  string $title (required)
     * @param  string $policy_in Der Standardwert für eingehende Pakete (optional)
     * @param  string $policy_out Der Standardwert für ausgehende Pakete (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\NetworkFirewall[], HTTP status code, HTTP response headers (array of strings)
     */
    public function networkFirewallCreatePostWithHttpInfo($title, $policy_in = null, $policy_out = null)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallCreatePostRequest($title, $policy_in, $policy_out);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\NetworkFirewall[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation networkFirewallCreatePostAsync
     *
     * 
     *
     * @param  string $title (required)
     * @param  string $policy_in Der Standardwert für eingehende Pakete (optional)
     * @param  string $policy_out Der Standardwert für ausgehende Pakete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallCreatePostAsync($title, $policy_in = null, $policy_out = null)
    {
        return $this->networkFirewallCreatePostAsyncWithHttpInfo($title, $policy_in, $policy_out)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkFirewallCreatePostAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $title (required)
     * @param  string $policy_in Der Standardwert für eingehende Pakete (optional)
     * @param  string $policy_out Der Standardwert für ausgehende Pakete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallCreatePostAsyncWithHttpInfo($title, $policy_in = null, $policy_out = null)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallCreatePostRequest($title, $policy_in, $policy_out);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkFirewallCreatePost'
     *
     * @param  string $title (required)
     * @param  string $policy_in Der Standardwert für eingehende Pakete (optional)
     * @param  string $policy_out Der Standardwert für ausgehende Pakete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function networkFirewallCreatePostRequest($title, $policy_in = null, $policy_out = null)
    {
        // verify the required parameter 'title' is set
        if ($title === null || (is_array($title) && count($title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title when calling networkFirewallCreatePost'
            );
        }

        $resourcePath = '/network/firewall/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title, null);
        }
        // query params
        if ($policy_in !== null) {
            $queryParams['policyIn'] = ObjectSerializer::toQueryValue($policy_in, null);
        }
        // query params
        if ($policy_out !== null) {
            $queryParams['policyOut'] = ObjectSerializer::toQueryValue($policy_out, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkFirewallDeleteDelete
     *
     * @param  int $firewall_id firewall_id (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function networkFirewallDeleteDelete($firewall_id)
    {
        list($response) = $this->networkFirewallDeleteDeleteWithHttpInfo($firewall_id);
        return $response;
    }

    /**
     * Operation networkFirewallDeleteDeleteWithHttpInfo
     *
     * @param  int $firewall_id (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkFirewallDeleteDeleteWithHttpInfo($firewall_id)
    {
        $returnType = 'string';
        $request = $this->networkFirewallDeleteDeleteRequest($firewall_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation networkFirewallDeleteDeleteAsync
     *
     * 
     *
     * @param  int $firewall_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallDeleteDeleteAsync($firewall_id)
    {
        return $this->networkFirewallDeleteDeleteAsyncWithHttpInfo($firewall_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkFirewallDeleteDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $firewall_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallDeleteDeleteAsyncWithHttpInfo($firewall_id)
    {
        $returnType = 'string';
        $request = $this->networkFirewallDeleteDeleteRequest($firewall_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkFirewallDeleteDelete'
     *
     * @param  int $firewall_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function networkFirewallDeleteDeleteRequest($firewall_id)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling networkFirewallDeleteDelete'
            );
        }

        $resourcePath = '/network/firewall/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($firewall_id !== null) {
            $queryParams['firewallId'] = ObjectSerializer::toQueryValue($firewall_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkFirewallGet
     *
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\NetworkFirewall[]
     */
    public function networkFirewallGet()
    {
        list($response) = $this->networkFirewallGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation networkFirewallGetWithHttpInfo
     *
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\NetworkFirewall[], HTTP status code, HTTP response headers (array of strings)
     */
    public function networkFirewallGetWithHttpInfo()
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\NetworkFirewall[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation networkFirewallGetAsync
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallGetAsync()
    {
        return $this->networkFirewallGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkFirewallGetAsyncWithHttpInfo
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallGetAsyncWithHttpInfo()
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkFirewallGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function networkFirewallGetRequest()
    {

        $resourcePath = '/network/firewall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkFirewallRolloutPost
     *
     * @param  int $firewall_id firewall_id (required)
     * @param  int $vserver_id vserver_id (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function networkFirewallRolloutPost($firewall_id, $vserver_id = null)
    {
        list($response) = $this->networkFirewallRolloutPostWithHttpInfo($firewall_id, $vserver_id);
        return $response;
    }

    /**
     * Operation networkFirewallRolloutPostWithHttpInfo
     *
     * @param  int $firewall_id (required)
     * @param  int $vserver_id (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkFirewallRolloutPostWithHttpInfo($firewall_id, $vserver_id = null)
    {
        $returnType = 'string';
        $request = $this->networkFirewallRolloutPostRequest($firewall_id, $vserver_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation networkFirewallRolloutPostAsync
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  int $vserver_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallRolloutPostAsync($firewall_id, $vserver_id = null)
    {
        return $this->networkFirewallRolloutPostAsyncWithHttpInfo($firewall_id, $vserver_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkFirewallRolloutPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  int $vserver_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallRolloutPostAsyncWithHttpInfo($firewall_id, $vserver_id = null)
    {
        $returnType = 'string';
        $request = $this->networkFirewallRolloutPostRequest($firewall_id, $vserver_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkFirewallRolloutPost'
     *
     * @param  int $firewall_id (required)
     * @param  int $vserver_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function networkFirewallRolloutPostRequest($firewall_id, $vserver_id = null)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling networkFirewallRolloutPost'
            );
        }

        $resourcePath = '/network/firewall/rollout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($firewall_id !== null) {
            $queryParams['firewallId'] = ObjectSerializer::toQueryValue($firewall_id, null);
        }
        // query params
        if ($vserver_id !== null) {
            $queryParams['vserverId'] = ObjectSerializer::toQueryValue($vserver_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkFirewallRuleCreatePost
     *
     * @param  int $firewall_id firewall_id (required)
     * @param  string $direction direction (required)
     * @param  bool $active active (optional)
     * @param  string $description description (optional)
     * @param  string $protocol protocol (optional)
     * @param  string $port Port oder Port-Range für diese Regel. Eine Port-Range kann mit einem Bindestrich oder mit einem Doppelpunkt gekennzeichnet werden. Beispiele: 80, 80-100, 80:100. (optional)
     * @param  string[] $source_addresses Hiermit können Quell-IP-Adressen bei eingehenden Regeln angegeben werden. (optional)
     * @param  string[] $destination_addresses Hiermit können Ziel-IP-Adressen bei ausgehenden Regeln angegeben werden. (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\NetworkFirewallRule[]
     */
    public function networkFirewallRuleCreatePost($firewall_id, $direction, $active = null, $description = null, $protocol = null, $port = null, $source_addresses = null, $destination_addresses = null)
    {
        list($response) = $this->networkFirewallRuleCreatePostWithHttpInfo($firewall_id, $direction, $active, $description, $protocol, $port, $source_addresses, $destination_addresses);
        return $response;
    }

    /**
     * Operation networkFirewallRuleCreatePostWithHttpInfo
     *
     * @param  int $firewall_id (required)
     * @param  string $direction (required)
     * @param  bool $active (optional)
     * @param  string $description (optional)
     * @param  string $protocol (optional)
     * @param  string $port Port oder Port-Range für diese Regel. Eine Port-Range kann mit einem Bindestrich oder mit einem Doppelpunkt gekennzeichnet werden. Beispiele: 80, 80-100, 80:100. (optional)
     * @param  string[] $source_addresses Hiermit können Quell-IP-Adressen bei eingehenden Regeln angegeben werden. (optional)
     * @param  string[] $destination_addresses Hiermit können Ziel-IP-Adressen bei ausgehenden Regeln angegeben werden. (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\NetworkFirewallRule[], HTTP status code, HTTP response headers (array of strings)
     */
    public function networkFirewallRuleCreatePostWithHttpInfo($firewall_id, $direction, $active = null, $description = null, $protocol = null, $port = null, $source_addresses = null, $destination_addresses = null)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewallRule[]';
        $request = $this->networkFirewallRuleCreatePostRequest($firewall_id, $direction, $active, $description, $protocol, $port, $source_addresses, $destination_addresses);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\NetworkFirewallRule[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation networkFirewallRuleCreatePostAsync
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  string $direction (required)
     * @param  bool $active (optional)
     * @param  string $description (optional)
     * @param  string $protocol (optional)
     * @param  string $port Port oder Port-Range für diese Regel. Eine Port-Range kann mit einem Bindestrich oder mit einem Doppelpunkt gekennzeichnet werden. Beispiele: 80, 80-100, 80:100. (optional)
     * @param  string[] $source_addresses Hiermit können Quell-IP-Adressen bei eingehenden Regeln angegeben werden. (optional)
     * @param  string[] $destination_addresses Hiermit können Ziel-IP-Adressen bei ausgehenden Regeln angegeben werden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallRuleCreatePostAsync($firewall_id, $direction, $active = null, $description = null, $protocol = null, $port = null, $source_addresses = null, $destination_addresses = null)
    {
        return $this->networkFirewallRuleCreatePostAsyncWithHttpInfo($firewall_id, $direction, $active, $description, $protocol, $port, $source_addresses, $destination_addresses)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkFirewallRuleCreatePostAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  string $direction (required)
     * @param  bool $active (optional)
     * @param  string $description (optional)
     * @param  string $protocol (optional)
     * @param  string $port Port oder Port-Range für diese Regel. Eine Port-Range kann mit einem Bindestrich oder mit einem Doppelpunkt gekennzeichnet werden. Beispiele: 80, 80-100, 80:100. (optional)
     * @param  string[] $source_addresses Hiermit können Quell-IP-Adressen bei eingehenden Regeln angegeben werden. (optional)
     * @param  string[] $destination_addresses Hiermit können Ziel-IP-Adressen bei ausgehenden Regeln angegeben werden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallRuleCreatePostAsyncWithHttpInfo($firewall_id, $direction, $active = null, $description = null, $protocol = null, $port = null, $source_addresses = null, $destination_addresses = null)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewallRule[]';
        $request = $this->networkFirewallRuleCreatePostRequest($firewall_id, $direction, $active, $description, $protocol, $port, $source_addresses, $destination_addresses);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkFirewallRuleCreatePost'
     *
     * @param  int $firewall_id (required)
     * @param  string $direction (required)
     * @param  bool $active (optional)
     * @param  string $description (optional)
     * @param  string $protocol (optional)
     * @param  string $port Port oder Port-Range für diese Regel. Eine Port-Range kann mit einem Bindestrich oder mit einem Doppelpunkt gekennzeichnet werden. Beispiele: 80, 80-100, 80:100. (optional)
     * @param  string[] $source_addresses Hiermit können Quell-IP-Adressen bei eingehenden Regeln angegeben werden. (optional)
     * @param  string[] $destination_addresses Hiermit können Ziel-IP-Adressen bei ausgehenden Regeln angegeben werden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function networkFirewallRuleCreatePostRequest($firewall_id, $direction, $active = null, $description = null, $protocol = null, $port = null, $source_addresses = null, $destination_addresses = null)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling networkFirewallRuleCreatePost'
            );
        }
        // verify the required parameter 'direction' is set
        if ($direction === null || (is_array($direction) && count($direction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $direction when calling networkFirewallRuleCreatePost'
            );
        }

        $resourcePath = '/network/firewall/rule/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($firewall_id !== null) {
            $queryParams['firewallId'] = ObjectSerializer::toQueryValue($firewall_id, null);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction, null);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active, null);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description, null);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol, null);
        }
        // query params
        if ($port !== null) {
            $queryParams['port'] = ObjectSerializer::toQueryValue($port, null);
        }
        // query params
        if (is_array($source_addresses)) {
            $source_addresses = ObjectSerializer::serializeCollection($source_addresses, 'multi', true);
        }
        if ($source_addresses !== null) {
            $queryParams['sourceAddresses'] = ObjectSerializer::toQueryValue($source_addresses, null);
        }
        // query params
        if (is_array($destination_addresses)) {
            $destination_addresses = ObjectSerializer::serializeCollection($destination_addresses, 'multi', true);
        }
        if ($destination_addresses !== null) {
            $queryParams['destinationAddresses'] = ObjectSerializer::toQueryValue($destination_addresses, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkFirewallRuleDeleteDelete
     *
     * @param  int $firewall_id firewall_id (required)
     * @param  int $rule_id rule_id (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function networkFirewallRuleDeleteDelete($firewall_id, $rule_id)
    {
        list($response) = $this->networkFirewallRuleDeleteDeleteWithHttpInfo($firewall_id, $rule_id);
        return $response;
    }

    /**
     * Operation networkFirewallRuleDeleteDeleteWithHttpInfo
     *
     * @param  int $firewall_id (required)
     * @param  int $rule_id (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkFirewallRuleDeleteDeleteWithHttpInfo($firewall_id, $rule_id)
    {
        $returnType = 'string';
        $request = $this->networkFirewallRuleDeleteDeleteRequest($firewall_id, $rule_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation networkFirewallRuleDeleteDeleteAsync
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  int $rule_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallRuleDeleteDeleteAsync($firewall_id, $rule_id)
    {
        return $this->networkFirewallRuleDeleteDeleteAsyncWithHttpInfo($firewall_id, $rule_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkFirewallRuleDeleteDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  int $rule_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallRuleDeleteDeleteAsyncWithHttpInfo($firewall_id, $rule_id)
    {
        $returnType = 'string';
        $request = $this->networkFirewallRuleDeleteDeleteRequest($firewall_id, $rule_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkFirewallRuleDeleteDelete'
     *
     * @param  int $firewall_id (required)
     * @param  int $rule_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function networkFirewallRuleDeleteDeleteRequest($firewall_id, $rule_id)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling networkFirewallRuleDeleteDelete'
            );
        }
        // verify the required parameter 'rule_id' is set
        if ($rule_id === null || (is_array($rule_id) && count($rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_id when calling networkFirewallRuleDeleteDelete'
            );
        }

        $resourcePath = '/network/firewall/rule/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($firewall_id !== null) {
            $queryParams['firewallId'] = ObjectSerializer::toQueryValue($firewall_id, null);
        }
        // query params
        if ($rule_id !== null) {
            $queryParams['ruleId'] = ObjectSerializer::toQueryValue($rule_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkFirewallRuleUpdatePost
     *
     * @param  int $firewall_id firewall_id (required)
     * @param  int $rule_id rule_id (required)
     * @param  bool $active active (optional)
     * @param  string $description description (optional)
     * @param  string $protocol protocol (optional)
     * @param  string $port Port oder Port-Range für diese Regel. Eine Port-Range kann mit einem Bindestrich oder mit einem Doppelpunkt gekennzeichnet werden. Beispiele: 80, 80-100, 80:100. (optional)
     * @param  string[] $source_addresses Hiermit können Quell-IP-Adressen bei eingehenden Regeln angegeben werden. (optional)
     * @param  string[] $destination_addresses Hiermit können Ziel-IP-Adressen bei ausgehenden Regeln angegeben werden. (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\NetworkFirewallRule[]
     */
    public function networkFirewallRuleUpdatePost($firewall_id, $rule_id, $active = null, $description = null, $protocol = null, $port = null, $source_addresses = null, $destination_addresses = null)
    {
        list($response) = $this->networkFirewallRuleUpdatePostWithHttpInfo($firewall_id, $rule_id, $active, $description, $protocol, $port, $source_addresses, $destination_addresses);
        return $response;
    }

    /**
     * Operation networkFirewallRuleUpdatePostWithHttpInfo
     *
     * @param  int $firewall_id (required)
     * @param  int $rule_id (required)
     * @param  bool $active (optional)
     * @param  string $description (optional)
     * @param  string $protocol (optional)
     * @param  string $port Port oder Port-Range für diese Regel. Eine Port-Range kann mit einem Bindestrich oder mit einem Doppelpunkt gekennzeichnet werden. Beispiele: 80, 80-100, 80:100. (optional)
     * @param  string[] $source_addresses Hiermit können Quell-IP-Adressen bei eingehenden Regeln angegeben werden. (optional)
     * @param  string[] $destination_addresses Hiermit können Ziel-IP-Adressen bei ausgehenden Regeln angegeben werden. (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\NetworkFirewallRule[], HTTP status code, HTTP response headers (array of strings)
     */
    public function networkFirewallRuleUpdatePostWithHttpInfo($firewall_id, $rule_id, $active = null, $description = null, $protocol = null, $port = null, $source_addresses = null, $destination_addresses = null)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewallRule[]';
        $request = $this->networkFirewallRuleUpdatePostRequest($firewall_id, $rule_id, $active, $description, $protocol, $port, $source_addresses, $destination_addresses);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\NetworkFirewallRule[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation networkFirewallRuleUpdatePostAsync
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  int $rule_id (required)
     * @param  bool $active (optional)
     * @param  string $description (optional)
     * @param  string $protocol (optional)
     * @param  string $port Port oder Port-Range für diese Regel. Eine Port-Range kann mit einem Bindestrich oder mit einem Doppelpunkt gekennzeichnet werden. Beispiele: 80, 80-100, 80:100. (optional)
     * @param  string[] $source_addresses Hiermit können Quell-IP-Adressen bei eingehenden Regeln angegeben werden. (optional)
     * @param  string[] $destination_addresses Hiermit können Ziel-IP-Adressen bei ausgehenden Regeln angegeben werden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallRuleUpdatePostAsync($firewall_id, $rule_id, $active = null, $description = null, $protocol = null, $port = null, $source_addresses = null, $destination_addresses = null)
    {
        return $this->networkFirewallRuleUpdatePostAsyncWithHttpInfo($firewall_id, $rule_id, $active, $description, $protocol, $port, $source_addresses, $destination_addresses)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkFirewallRuleUpdatePostAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  int $rule_id (required)
     * @param  bool $active (optional)
     * @param  string $description (optional)
     * @param  string $protocol (optional)
     * @param  string $port Port oder Port-Range für diese Regel. Eine Port-Range kann mit einem Bindestrich oder mit einem Doppelpunkt gekennzeichnet werden. Beispiele: 80, 80-100, 80:100. (optional)
     * @param  string[] $source_addresses Hiermit können Quell-IP-Adressen bei eingehenden Regeln angegeben werden. (optional)
     * @param  string[] $destination_addresses Hiermit können Ziel-IP-Adressen bei ausgehenden Regeln angegeben werden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallRuleUpdatePostAsyncWithHttpInfo($firewall_id, $rule_id, $active = null, $description = null, $protocol = null, $port = null, $source_addresses = null, $destination_addresses = null)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewallRule[]';
        $request = $this->networkFirewallRuleUpdatePostRequest($firewall_id, $rule_id, $active, $description, $protocol, $port, $source_addresses, $destination_addresses);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkFirewallRuleUpdatePost'
     *
     * @param  int $firewall_id (required)
     * @param  int $rule_id (required)
     * @param  bool $active (optional)
     * @param  string $description (optional)
     * @param  string $protocol (optional)
     * @param  string $port Port oder Port-Range für diese Regel. Eine Port-Range kann mit einem Bindestrich oder mit einem Doppelpunkt gekennzeichnet werden. Beispiele: 80, 80-100, 80:100. (optional)
     * @param  string[] $source_addresses Hiermit können Quell-IP-Adressen bei eingehenden Regeln angegeben werden. (optional)
     * @param  string[] $destination_addresses Hiermit können Ziel-IP-Adressen bei ausgehenden Regeln angegeben werden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function networkFirewallRuleUpdatePostRequest($firewall_id, $rule_id, $active = null, $description = null, $protocol = null, $port = null, $source_addresses = null, $destination_addresses = null)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling networkFirewallRuleUpdatePost'
            );
        }
        // verify the required parameter 'rule_id' is set
        if ($rule_id === null || (is_array($rule_id) && count($rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_id when calling networkFirewallRuleUpdatePost'
            );
        }

        $resourcePath = '/network/firewall/rule/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($firewall_id !== null) {
            $queryParams['firewallId'] = ObjectSerializer::toQueryValue($firewall_id, null);
        }
        // query params
        if ($rule_id !== null) {
            $queryParams['ruleId'] = ObjectSerializer::toQueryValue($rule_id, null);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active, null);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description, null);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol, null);
        }
        // query params
        if ($port !== null) {
            $queryParams['port'] = ObjectSerializer::toQueryValue($port, null);
        }
        // query params
        if (is_array($source_addresses)) {
            $source_addresses = ObjectSerializer::serializeCollection($source_addresses, 'multi', true);
        }
        if ($source_addresses !== null) {
            $queryParams['sourceAddresses'] = ObjectSerializer::toQueryValue($source_addresses, null);
        }
        // query params
        if (is_array($destination_addresses)) {
            $destination_addresses = ObjectSerializer::serializeCollection($destination_addresses, 'multi', true);
        }
        if ($destination_addresses !== null) {
            $queryParams['destinationAddresses'] = ObjectSerializer::toQueryValue($destination_addresses, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkFirewallShowGet
     *
     * @param  int $firewall_id firewall_id (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\NetworkFirewall[]
     */
    public function networkFirewallShowGet($firewall_id)
    {
        list($response) = $this->networkFirewallShowGetWithHttpInfo($firewall_id);
        return $response;
    }

    /**
     * Operation networkFirewallShowGetWithHttpInfo
     *
     * @param  int $firewall_id (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\NetworkFirewall[], HTTP status code, HTTP response headers (array of strings)
     */
    public function networkFirewallShowGetWithHttpInfo($firewall_id)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallShowGetRequest($firewall_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\NetworkFirewall[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation networkFirewallShowGetAsync
     *
     * 
     *
     * @param  int $firewall_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallShowGetAsync($firewall_id)
    {
        return $this->networkFirewallShowGetAsyncWithHttpInfo($firewall_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkFirewallShowGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $firewall_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallShowGetAsyncWithHttpInfo($firewall_id)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallShowGetRequest($firewall_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkFirewallShowGet'
     *
     * @param  int $firewall_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function networkFirewallShowGetRequest($firewall_id)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling networkFirewallShowGet'
            );
        }

        $resourcePath = '/network/firewall/show';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($firewall_id !== null) {
            $queryParams['firewallId'] = ObjectSerializer::toQueryValue($firewall_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkFirewallUnassignDelete
     *
     * @param  int $firewall_id firewall_id (required)
     * @param  string $vserver_id vserver_id (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\NetworkFirewall[]
     */
    public function networkFirewallUnassignDelete($firewall_id, $vserver_id = null)
    {
        list($response) = $this->networkFirewallUnassignDeleteWithHttpInfo($firewall_id, $vserver_id);
        return $response;
    }

    /**
     * Operation networkFirewallUnassignDeleteWithHttpInfo
     *
     * @param  int $firewall_id (required)
     * @param  string $vserver_id (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\NetworkFirewall[], HTTP status code, HTTP response headers (array of strings)
     */
    public function networkFirewallUnassignDeleteWithHttpInfo($firewall_id, $vserver_id = null)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallUnassignDeleteRequest($firewall_id, $vserver_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\NetworkFirewall[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation networkFirewallUnassignDeleteAsync
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  string $vserver_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallUnassignDeleteAsync($firewall_id, $vserver_id = null)
    {
        return $this->networkFirewallUnassignDeleteAsyncWithHttpInfo($firewall_id, $vserver_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkFirewallUnassignDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  string $vserver_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallUnassignDeleteAsyncWithHttpInfo($firewall_id, $vserver_id = null)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallUnassignDeleteRequest($firewall_id, $vserver_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkFirewallUnassignDelete'
     *
     * @param  int $firewall_id (required)
     * @param  string $vserver_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function networkFirewallUnassignDeleteRequest($firewall_id, $vserver_id = null)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling networkFirewallUnassignDelete'
            );
        }

        $resourcePath = '/network/firewall/unassign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($firewall_id !== null) {
            $queryParams['firewallId'] = ObjectSerializer::toQueryValue($firewall_id, null);
        }
        // query params
        if ($vserver_id !== null) {
            $queryParams['vserverId'] = ObjectSerializer::toQueryValue($vserver_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkFirewallUpdatePost
     *
     * @param  int $firewall_id firewall_id (required)
     * @param  string $title title (required)
     * @param  string $policy_in Der Standardwert für eingehende Pakete (optional)
     * @param  string $policy_out Der Standardwert für ausgehende Pakete (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\NetworkFirewall[]
     */
    public function networkFirewallUpdatePost($firewall_id, $title, $policy_in = null, $policy_out = null)
    {
        list($response) = $this->networkFirewallUpdatePostWithHttpInfo($firewall_id, $title, $policy_in, $policy_out);
        return $response;
    }

    /**
     * Operation networkFirewallUpdatePostWithHttpInfo
     *
     * @param  int $firewall_id (required)
     * @param  string $title (required)
     * @param  string $policy_in Der Standardwert für eingehende Pakete (optional)
     * @param  string $policy_out Der Standardwert für ausgehende Pakete (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\NetworkFirewall[], HTTP status code, HTTP response headers (array of strings)
     */
    public function networkFirewallUpdatePostWithHttpInfo($firewall_id, $title, $policy_in = null, $policy_out = null)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallUpdatePostRequest($firewall_id, $title, $policy_in, $policy_out);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\NetworkFirewall[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation networkFirewallUpdatePostAsync
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  string $title (required)
     * @param  string $policy_in Der Standardwert für eingehende Pakete (optional)
     * @param  string $policy_out Der Standardwert für ausgehende Pakete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallUpdatePostAsync($firewall_id, $title, $policy_in = null, $policy_out = null)
    {
        return $this->networkFirewallUpdatePostAsyncWithHttpInfo($firewall_id, $title, $policy_in, $policy_out)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkFirewallUpdatePostAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $firewall_id (required)
     * @param  string $title (required)
     * @param  string $policy_in Der Standardwert für eingehende Pakete (optional)
     * @param  string $policy_out Der Standardwert für ausgehende Pakete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkFirewallUpdatePostAsyncWithHttpInfo($firewall_id, $title, $policy_in = null, $policy_out = null)
    {
        $returnType = '\csakel\RUBClient\Model\NetworkFirewall[]';
        $request = $this->networkFirewallUpdatePostRequest($firewall_id, $title, $policy_in, $policy_out);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkFirewallUpdatePost'
     *
     * @param  int $firewall_id (required)
     * @param  string $title (required)
     * @param  string $policy_in Der Standardwert für eingehende Pakete (optional)
     * @param  string $policy_out Der Standardwert für ausgehende Pakete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function networkFirewallUpdatePostRequest($firewall_id, $title, $policy_in = null, $policy_out = null)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling networkFirewallUpdatePost'
            );
        }
        // verify the required parameter 'title' is set
        if ($title === null || (is_array($title) && count($title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title when calling networkFirewallUpdatePost'
            );
        }

        $resourcePath = '/network/firewall/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($firewall_id !== null) {
            $queryParams['firewallId'] = ObjectSerializer::toQueryValue($firewall_id, null);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title, null);
        }
        // query params
        if ($policy_in !== null) {
            $queryParams['policyIn'] = ObjectSerializer::toQueryValue($policy_in, null);
        }
        // query params
        if ($policy_out !== null) {
            $queryParams['policyOut'] = ObjectSerializer::toQueryValue($policy_out, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
