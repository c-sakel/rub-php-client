<?php
/**
 * DomainhandleApi
 * PHP version 5
 *
 * @category Class
 * @package  c-sakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RESELLING.SERVICES API
 *
 * Auf folgender Seite finden Sie die Beschreibung der RESELLING.SERVICES Schnittstelle  <!--<a href=\"https://reselling.services/api-docs?lang=en\" title=\"Englische Dokumentation\">Dokumentation in Englisch</a>-->
 *
 * OpenAPI spec version: 1.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace c-sakel\RUBClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use c-sakel\RUBClient\ApiException;
use c-sakel\RUBClient\Configuration;
use c-sakel\RUBClient\HeaderSelector;
use c-sakel\RUBClient\ObjectSerializer;

/**
 * DomainhandleApi Class Doc Comment
 *
 * @category Class
 * @package  c-sakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainhandleApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation domainHandle
     *
     * Alle Handles abrufen
     *
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\DomainHandle[]
     */
    public function domainHandle()
    {
        list($response) = $this->domainHandleWithHttpInfo();
        return $response;
    }

    /**
     * Operation domainHandleWithHttpInfo
     *
     * Alle Handles abrufen
     *
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\DomainHandle[], HTTP status code, HTTP response headers (array of strings)
     */
    public function domainHandleWithHttpInfo()
    {
        $returnType = '\c-sakel\RUBClient\Model\DomainHandle[]';
        $request = $this->domainHandleRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\DomainHandle[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation domainHandleAsync
     *
     * Alle Handles abrufen
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainHandleAsync()
    {
        return $this->domainHandleAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation domainHandleAsyncWithHttpInfo
     *
     * Alle Handles abrufen
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainHandleAsyncWithHttpInfo()
    {
        $returnType = '\c-sakel\RUBClient\Model\DomainHandle[]';
        $request = $this->domainHandleRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'domainHandle'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function domainHandleRequest()
    {

        $resourcePath = '/domain/handle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation domainHandleCountries
     *
     * Länder für Handles abrufen
     *
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function domainHandleCountries()
    {
        list($response) = $this->domainHandleCountriesWithHttpInfo();
        return $response;
    }

    /**
     * Operation domainHandleCountriesWithHttpInfo
     *
     * Länder für Handles abrufen
     *
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function domainHandleCountriesWithHttpInfo()
    {
        $returnType = 'string[]';
        $request = $this->domainHandleCountriesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation domainHandleCountriesAsync
     *
     * Länder für Handles abrufen
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainHandleCountriesAsync()
    {
        return $this->domainHandleCountriesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation domainHandleCountriesAsyncWithHttpInfo
     *
     * Länder für Handles abrufen
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainHandleCountriesAsyncWithHttpInfo()
    {
        $returnType = 'string[]';
        $request = $this->domainHandleCountriesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'domainHandleCountries'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function domainHandleCountriesRequest()
    {

        $resourcePath = '/domain/handle/countries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation domainHandleCreate
     *
     * Handle erstellen
     *
     * @param  string $type Handle-Typ, mögliche Werte: PERS, ORG (required)
     * @param  string $sex Geschlecht, mögliche Werte: MALE, FEMALE (required)
     * @param  string $first_name Vorname (required)
     * @param  string $last_name Nachname (required)
     * @param  string $street Strasse (required)
     * @param  string $number Hausnummer (required)
     * @param  string $postcode Postleitzahl (required)
     * @param  string $city Stadt (required)
     * @param  string $region Bundesland (required)
     * @param  string $country Ländercode, abrufbar unter /domain/handle/countries (required)
     * @param  string $email E-Mail Adresse (required)
     * @param  string $organisation Firma / Organisation (optional)
     * @param  string $phone Telefon Nummer (optional)
     * @param  string $fax Fax Nummer (optional)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\DomainHandle[]
     */
    public function domainHandleCreate($type, $sex, $first_name, $last_name, $street, $number, $postcode, $city, $region, $country, $email, $organisation = null, $phone = null, $fax = null)
    {
        list($response) = $this->domainHandleCreateWithHttpInfo($type, $sex, $first_name, $last_name, $street, $number, $postcode, $city, $region, $country, $email, $organisation, $phone, $fax);
        return $response;
    }

    /**
     * Operation domainHandleCreateWithHttpInfo
     *
     * Handle erstellen
     *
     * @param  string $type Handle-Typ, mögliche Werte: PERS, ORG (required)
     * @param  string $sex Geschlecht, mögliche Werte: MALE, FEMALE (required)
     * @param  string $first_name Vorname (required)
     * @param  string $last_name Nachname (required)
     * @param  string $street Strasse (required)
     * @param  string $number Hausnummer (required)
     * @param  string $postcode Postleitzahl (required)
     * @param  string $city Stadt (required)
     * @param  string $region Bundesland (required)
     * @param  string $country Ländercode, abrufbar unter /domain/handle/countries (required)
     * @param  string $email E-Mail Adresse (required)
     * @param  string $organisation Firma / Organisation (optional)
     * @param  string $phone Telefon Nummer (optional)
     * @param  string $fax Fax Nummer (optional)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\DomainHandle[], HTTP status code, HTTP response headers (array of strings)
     */
    public function domainHandleCreateWithHttpInfo($type, $sex, $first_name, $last_name, $street, $number, $postcode, $city, $region, $country, $email, $organisation = null, $phone = null, $fax = null)
    {
        $returnType = '\c-sakel\RUBClient\Model\DomainHandle[]';
        $request = $this->domainHandleCreateRequest($type, $sex, $first_name, $last_name, $street, $number, $postcode, $city, $region, $country, $email, $organisation, $phone, $fax);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\DomainHandle[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation domainHandleCreateAsync
     *
     * Handle erstellen
     *
     * @param  string $type Handle-Typ, mögliche Werte: PERS, ORG (required)
     * @param  string $sex Geschlecht, mögliche Werte: MALE, FEMALE (required)
     * @param  string $first_name Vorname (required)
     * @param  string $last_name Nachname (required)
     * @param  string $street Strasse (required)
     * @param  string $number Hausnummer (required)
     * @param  string $postcode Postleitzahl (required)
     * @param  string $city Stadt (required)
     * @param  string $region Bundesland (required)
     * @param  string $country Ländercode, abrufbar unter /domain/handle/countries (required)
     * @param  string $email E-Mail Adresse (required)
     * @param  string $organisation Firma / Organisation (optional)
     * @param  string $phone Telefon Nummer (optional)
     * @param  string $fax Fax Nummer (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainHandleCreateAsync($type, $sex, $first_name, $last_name, $street, $number, $postcode, $city, $region, $country, $email, $organisation = null, $phone = null, $fax = null)
    {
        return $this->domainHandleCreateAsyncWithHttpInfo($type, $sex, $first_name, $last_name, $street, $number, $postcode, $city, $region, $country, $email, $organisation, $phone, $fax)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation domainHandleCreateAsyncWithHttpInfo
     *
     * Handle erstellen
     *
     * @param  string $type Handle-Typ, mögliche Werte: PERS, ORG (required)
     * @param  string $sex Geschlecht, mögliche Werte: MALE, FEMALE (required)
     * @param  string $first_name Vorname (required)
     * @param  string $last_name Nachname (required)
     * @param  string $street Strasse (required)
     * @param  string $number Hausnummer (required)
     * @param  string $postcode Postleitzahl (required)
     * @param  string $city Stadt (required)
     * @param  string $region Bundesland (required)
     * @param  string $country Ländercode, abrufbar unter /domain/handle/countries (required)
     * @param  string $email E-Mail Adresse (required)
     * @param  string $organisation Firma / Organisation (optional)
     * @param  string $phone Telefon Nummer (optional)
     * @param  string $fax Fax Nummer (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainHandleCreateAsyncWithHttpInfo($type, $sex, $first_name, $last_name, $street, $number, $postcode, $city, $region, $country, $email, $organisation = null, $phone = null, $fax = null)
    {
        $returnType = '\c-sakel\RUBClient\Model\DomainHandle[]';
        $request = $this->domainHandleCreateRequest($type, $sex, $first_name, $last_name, $street, $number, $postcode, $city, $region, $country, $email, $organisation, $phone, $fax);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'domainHandleCreate'
     *
     * @param  string $type Handle-Typ, mögliche Werte: PERS, ORG (required)
     * @param  string $sex Geschlecht, mögliche Werte: MALE, FEMALE (required)
     * @param  string $first_name Vorname (required)
     * @param  string $last_name Nachname (required)
     * @param  string $street Strasse (required)
     * @param  string $number Hausnummer (required)
     * @param  string $postcode Postleitzahl (required)
     * @param  string $city Stadt (required)
     * @param  string $region Bundesland (required)
     * @param  string $country Ländercode, abrufbar unter /domain/handle/countries (required)
     * @param  string $email E-Mail Adresse (required)
     * @param  string $organisation Firma / Organisation (optional)
     * @param  string $phone Telefon Nummer (optional)
     * @param  string $fax Fax Nummer (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function domainHandleCreateRequest($type, $sex, $first_name, $last_name, $street, $number, $postcode, $city, $region, $country, $email, $organisation = null, $phone = null, $fax = null)
    {
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling domainHandleCreate'
            );
        }
        // verify the required parameter 'sex' is set
        if ($sex === null || (is_array($sex) && count($sex) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sex when calling domainHandleCreate'
            );
        }
        // verify the required parameter 'first_name' is set
        if ($first_name === null || (is_array($first_name) && count($first_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_name when calling domainHandleCreate'
            );
        }
        // verify the required parameter 'last_name' is set
        if ($last_name === null || (is_array($last_name) && count($last_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_name when calling domainHandleCreate'
            );
        }
        // verify the required parameter 'street' is set
        if ($street === null || (is_array($street) && count($street) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $street when calling domainHandleCreate'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling domainHandleCreate'
            );
        }
        // verify the required parameter 'postcode' is set
        if ($postcode === null || (is_array($postcode) && count($postcode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postcode when calling domainHandleCreate'
            );
        }
        // verify the required parameter 'city' is set
        if ($city === null || (is_array($city) && count($city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city when calling domainHandleCreate'
            );
        }
        // verify the required parameter 'region' is set
        if ($region === null || (is_array($region) && count($region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $region when calling domainHandleCreate'
            );
        }
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling domainHandleCreate'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling domainHandleCreate'
            );
        }

        $resourcePath = '/domain/handle/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($sex !== null) {
            $queryParams['sex'] = ObjectSerializer::toQueryValue($sex, null);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['firstName'] = ObjectSerializer::toQueryValue($first_name, null);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['lastName'] = ObjectSerializer::toQueryValue($last_name, null);
        }
        // query params
        if ($street !== null) {
            $queryParams['street'] = ObjectSerializer::toQueryValue($street, null);
        }
        // query params
        if ($number !== null) {
            $queryParams['number'] = ObjectSerializer::toQueryValue($number, null);
        }
        // query params
        if ($postcode !== null) {
            $queryParams['postcode'] = ObjectSerializer::toQueryValue($postcode, null);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city, null);
        }
        // query params
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region, null);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country, null);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email, null);
        }
        // query params
        if ($organisation !== null) {
            $queryParams['organisation'] = ObjectSerializer::toQueryValue($organisation, null);
        }
        // query params
        if ($phone !== null) {
            $queryParams['phone'] = ObjectSerializer::toQueryValue($phone, null);
        }
        // query params
        if ($fax !== null) {
            $queryParams['fax'] = ObjectSerializer::toQueryValue($fax, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation domainHandleDelete
     *
     * Handle löschen
     *
     * @param  string $handle Handle, welches gelöscht werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\DomainHandle[]
     */
    public function domainHandleDelete($handle)
    {
        list($response) = $this->domainHandleDeleteWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation domainHandleDeleteWithHttpInfo
     *
     * Handle löschen
     *
     * @param  string $handle Handle, welches gelöscht werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\DomainHandle[], HTTP status code, HTTP response headers (array of strings)
     */
    public function domainHandleDeleteWithHttpInfo($handle)
    {
        $returnType = '\c-sakel\RUBClient\Model\DomainHandle[]';
        $request = $this->domainHandleDeleteRequest($handle);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\DomainHandle[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation domainHandleDeleteAsync
     *
     * Handle löschen
     *
     * @param  string $handle Handle, welches gelöscht werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainHandleDeleteAsync($handle)
    {
        return $this->domainHandleDeleteAsyncWithHttpInfo($handle)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation domainHandleDeleteAsyncWithHttpInfo
     *
     * Handle löschen
     *
     * @param  string $handle Handle, welches gelöscht werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainHandleDeleteAsyncWithHttpInfo($handle)
    {
        $returnType = '\c-sakel\RUBClient\Model\DomainHandle[]';
        $request = $this->domainHandleDeleteRequest($handle);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'domainHandleDelete'
     *
     * @param  string $handle Handle, welches gelöscht werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function domainHandleDeleteRequest($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null || (is_array($handle) && count($handle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $handle when calling domainHandleDelete'
            );
        }

        $resourcePath = '/domain/handle/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation domainHandleShow
     *
     * Einzelnes Handle abrufen
     *
     * @param  string $handle Handle, welches abgerufen werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\DomainHandle[]
     */
    public function domainHandleShow($handle)
    {
        list($response) = $this->domainHandleShowWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation domainHandleShowWithHttpInfo
     *
     * Einzelnes Handle abrufen
     *
     * @param  string $handle Handle, welches abgerufen werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\DomainHandle[], HTTP status code, HTTP response headers (array of strings)
     */
    public function domainHandleShowWithHttpInfo($handle)
    {
        $returnType = '\c-sakel\RUBClient\Model\DomainHandle[]';
        $request = $this->domainHandleShowRequest($handle);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\DomainHandle[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation domainHandleShowAsync
     *
     * Einzelnes Handle abrufen
     *
     * @param  string $handle Handle, welches abgerufen werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainHandleShowAsync($handle)
    {
        return $this->domainHandleShowAsyncWithHttpInfo($handle)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation domainHandleShowAsyncWithHttpInfo
     *
     * Einzelnes Handle abrufen
     *
     * @param  string $handle Handle, welches abgerufen werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainHandleShowAsyncWithHttpInfo($handle)
    {
        $returnType = '\c-sakel\RUBClient\Model\DomainHandle[]';
        $request = $this->domainHandleShowRequest($handle);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'domainHandleShow'
     *
     * @param  string $handle Handle, welches abgerufen werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function domainHandleShowRequest($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null || (is_array($handle) && count($handle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $handle when calling domainHandleShow'
            );
        }

        $resourcePath = '/domain/handle/show';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation domainHandleUpdate
     *
     * Handle aktualisieren
     *
     * @param  string $handle Handle, welches aktualisiert werden soll (required)
     * @param  string $street Strasse (required)
     * @param  string $number Hausnummer (required)
     * @param  string $postcode Postleitzahl (required)
     * @param  string $city Stadt (required)
     * @param  string $region Bundesland (required)
     * @param  string $country Ländercode, abrufbar unter /domain/handle/countries (required)
     * @param  string $email E-Mail Adresse (required)
     * @param  string $organisation Firma / Organisation (optional)
     * @param  string $phone Telefon Nummer (optional)
     * @param  string $fax Fax Nummer (optional)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\DomainHandle[]
     */
    public function domainHandleUpdate($handle, $street, $number, $postcode, $city, $region, $country, $email, $organisation = null, $phone = null, $fax = null)
    {
        list($response) = $this->domainHandleUpdateWithHttpInfo($handle, $street, $number, $postcode, $city, $region, $country, $email, $organisation, $phone, $fax);
        return $response;
    }

    /**
     * Operation domainHandleUpdateWithHttpInfo
     *
     * Handle aktualisieren
     *
     * @param  string $handle Handle, welches aktualisiert werden soll (required)
     * @param  string $street Strasse (required)
     * @param  string $number Hausnummer (required)
     * @param  string $postcode Postleitzahl (required)
     * @param  string $city Stadt (required)
     * @param  string $region Bundesland (required)
     * @param  string $country Ländercode, abrufbar unter /domain/handle/countries (required)
     * @param  string $email E-Mail Adresse (required)
     * @param  string $organisation Firma / Organisation (optional)
     * @param  string $phone Telefon Nummer (optional)
     * @param  string $fax Fax Nummer (optional)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\DomainHandle[], HTTP status code, HTTP response headers (array of strings)
     */
    public function domainHandleUpdateWithHttpInfo($handle, $street, $number, $postcode, $city, $region, $country, $email, $organisation = null, $phone = null, $fax = null)
    {
        $returnType = '\c-sakel\RUBClient\Model\DomainHandle[]';
        $request = $this->domainHandleUpdateRequest($handle, $street, $number, $postcode, $city, $region, $country, $email, $organisation, $phone, $fax);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\DomainHandle[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation domainHandleUpdateAsync
     *
     * Handle aktualisieren
     *
     * @param  string $handle Handle, welches aktualisiert werden soll (required)
     * @param  string $street Strasse (required)
     * @param  string $number Hausnummer (required)
     * @param  string $postcode Postleitzahl (required)
     * @param  string $city Stadt (required)
     * @param  string $region Bundesland (required)
     * @param  string $country Ländercode, abrufbar unter /domain/handle/countries (required)
     * @param  string $email E-Mail Adresse (required)
     * @param  string $organisation Firma / Organisation (optional)
     * @param  string $phone Telefon Nummer (optional)
     * @param  string $fax Fax Nummer (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainHandleUpdateAsync($handle, $street, $number, $postcode, $city, $region, $country, $email, $organisation = null, $phone = null, $fax = null)
    {
        return $this->domainHandleUpdateAsyncWithHttpInfo($handle, $street, $number, $postcode, $city, $region, $country, $email, $organisation, $phone, $fax)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation domainHandleUpdateAsyncWithHttpInfo
     *
     * Handle aktualisieren
     *
     * @param  string $handle Handle, welches aktualisiert werden soll (required)
     * @param  string $street Strasse (required)
     * @param  string $number Hausnummer (required)
     * @param  string $postcode Postleitzahl (required)
     * @param  string $city Stadt (required)
     * @param  string $region Bundesland (required)
     * @param  string $country Ländercode, abrufbar unter /domain/handle/countries (required)
     * @param  string $email E-Mail Adresse (required)
     * @param  string $organisation Firma / Organisation (optional)
     * @param  string $phone Telefon Nummer (optional)
     * @param  string $fax Fax Nummer (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainHandleUpdateAsyncWithHttpInfo($handle, $street, $number, $postcode, $city, $region, $country, $email, $organisation = null, $phone = null, $fax = null)
    {
        $returnType = '\c-sakel\RUBClient\Model\DomainHandle[]';
        $request = $this->domainHandleUpdateRequest($handle, $street, $number, $postcode, $city, $region, $country, $email, $organisation, $phone, $fax);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'domainHandleUpdate'
     *
     * @param  string $handle Handle, welches aktualisiert werden soll (required)
     * @param  string $street Strasse (required)
     * @param  string $number Hausnummer (required)
     * @param  string $postcode Postleitzahl (required)
     * @param  string $city Stadt (required)
     * @param  string $region Bundesland (required)
     * @param  string $country Ländercode, abrufbar unter /domain/handle/countries (required)
     * @param  string $email E-Mail Adresse (required)
     * @param  string $organisation Firma / Organisation (optional)
     * @param  string $phone Telefon Nummer (optional)
     * @param  string $fax Fax Nummer (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function domainHandleUpdateRequest($handle, $street, $number, $postcode, $city, $region, $country, $email, $organisation = null, $phone = null, $fax = null)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null || (is_array($handle) && count($handle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $handle when calling domainHandleUpdate'
            );
        }
        // verify the required parameter 'street' is set
        if ($street === null || (is_array($street) && count($street) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $street when calling domainHandleUpdate'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling domainHandleUpdate'
            );
        }
        // verify the required parameter 'postcode' is set
        if ($postcode === null || (is_array($postcode) && count($postcode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postcode when calling domainHandleUpdate'
            );
        }
        // verify the required parameter 'city' is set
        if ($city === null || (is_array($city) && count($city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city when calling domainHandleUpdate'
            );
        }
        // verify the required parameter 'region' is set
        if ($region === null || (is_array($region) && count($region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $region when calling domainHandleUpdate'
            );
        }
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling domainHandleUpdate'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling domainHandleUpdate'
            );
        }

        $resourcePath = '/domain/handle/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle, null);
        }
        // query params
        if ($street !== null) {
            $queryParams['street'] = ObjectSerializer::toQueryValue($street, null);
        }
        // query params
        if ($number !== null) {
            $queryParams['number'] = ObjectSerializer::toQueryValue($number, null);
        }
        // query params
        if ($postcode !== null) {
            $queryParams['postcode'] = ObjectSerializer::toQueryValue($postcode, null);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city, null);
        }
        // query params
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region, null);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country, null);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email, null);
        }
        // query params
        if ($organisation !== null) {
            $queryParams['organisation'] = ObjectSerializer::toQueryValue($organisation, null);
        }
        // query params
        if ($phone !== null) {
            $queryParams['phone'] = ObjectSerializer::toQueryValue($phone, null);
        }
        // query params
        if ($fax !== null) {
            $queryParams['fax'] = ObjectSerializer::toQueryValue($fax, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
