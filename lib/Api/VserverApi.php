<?php
/**
 * VserverApi
 * PHP version 5
 *
 * @category Class
 * @package  csakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RESELLING.SERVICES API
 *
 * Auf folgender Seite finden Sie die Beschreibung der RESELLING.SERVICES Schnittstelle  <!--<a href=\"https://reselling.services/api-docs?lang=en\" title=\"Englische Dokumentation\">Dokumentation in Englisch</a>-->
 *
 * OpenAPI spec version: 1.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace csakel\RUBClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use csakel\RUBClient\ApiException;
use csakel\RUBClient\Configuration;
use csakel\RUBClient\HeaderSelector;
use csakel\RUBClient\ObjectSerializer;

/**
 * VserverApi Class Doc Comment
 *
 * @category Class
 * @package  csakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VserverApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation vserverAddress
     *
     * vServer IP-Adressen abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\Address[]
     */
    public function vserverAddress($server_id)
    {
        list($response) = $this->vserverAddressWithHttpInfo($server_id);
        return $response;
    }

    /**
     * Operation vserverAddressWithHttpInfo
     *
     * vServer IP-Adressen abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\Address[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverAddressWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Address[]';
        $request = $this->vserverAddressRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\Address[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverAddressAsync
     *
     * vServer IP-Adressen abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverAddressAsync($server_id)
    {
        return $this->vserverAddressAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverAddressAsyncWithHttpInfo
     *
     * vServer IP-Adressen abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverAddressAsyncWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Address[]';
        $request = $this->vserverAddressRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverAddress'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverAddressRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverAddress'
            );
        }

        $resourcePath = '/vserver/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverCreate
     *
     * Neuen vServer bestellen
     *
     * @param  int $cores Anzahl der Kerne (required)
     * @param  int $memory Arbeitsspeicher in MB (required)
     * @param  int $disk SSD Speicher in GB (required)
     * @param  int $ip_addresses Anzahl der IPv4-Adressen (required)
     * @param  int $ip6_addresses Anzahl der IPv6 Adressen (required)
     * @param  int $backups Anzahl der Backup-Slots (required)
     * @param  int $template Template-ID aus /vserver/templates (required)
     * @param  string $hostname Hostname des Servers (optional)
     * @param  string $password Rootpasswort des Servers (optional)
     * @param  string[] $ssh_keys Public-Keys, welche auf dem Server eingerichtet werden sollen. (optional)
     * @param  string[] $commands Benutzerdefinierte Befehle, welche nach der Installation auf dem Server ausgeführt werden sollen. (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\Vserver[]
     */
    public function vserverCreate($cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups, $template, $hostname = null, $password = null, $ssh_keys = null, $commands = null)
    {
        list($response) = $this->vserverCreateWithHttpInfo($cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups, $template, $hostname, $password, $ssh_keys, $commands);
        return $response;
    }

    /**
     * Operation vserverCreateWithHttpInfo
     *
     * Neuen vServer bestellen
     *
     * @param  int $cores Anzahl der Kerne (required)
     * @param  int $memory Arbeitsspeicher in MB (required)
     * @param  int $disk SSD Speicher in GB (required)
     * @param  int $ip_addresses Anzahl der IPv4-Adressen (required)
     * @param  int $ip6_addresses Anzahl der IPv6 Adressen (required)
     * @param  int $backups Anzahl der Backup-Slots (required)
     * @param  int $template Template-ID aus /vserver/templates (required)
     * @param  string $hostname Hostname des Servers (optional)
     * @param  string $password Rootpasswort des Servers (optional)
     * @param  string[] $ssh_keys Public-Keys, welche auf dem Server eingerichtet werden sollen. (optional)
     * @param  string[] $commands Benutzerdefinierte Befehle, welche nach der Installation auf dem Server ausgeführt werden sollen. (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\Vserver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverCreateWithHttpInfo($cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups, $template, $hostname = null, $password = null, $ssh_keys = null, $commands = null)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverCreateRequest($cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups, $template, $hostname, $password, $ssh_keys, $commands);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\Vserver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverCreateAsync
     *
     * Neuen vServer bestellen
     *
     * @param  int $cores Anzahl der Kerne (required)
     * @param  int $memory Arbeitsspeicher in MB (required)
     * @param  int $disk SSD Speicher in GB (required)
     * @param  int $ip_addresses Anzahl der IPv4-Adressen (required)
     * @param  int $ip6_addresses Anzahl der IPv6 Adressen (required)
     * @param  int $backups Anzahl der Backup-Slots (required)
     * @param  int $template Template-ID aus /vserver/templates (required)
     * @param  string $hostname Hostname des Servers (optional)
     * @param  string $password Rootpasswort des Servers (optional)
     * @param  string[] $ssh_keys Public-Keys, welche auf dem Server eingerichtet werden sollen. (optional)
     * @param  string[] $commands Benutzerdefinierte Befehle, welche nach der Installation auf dem Server ausgeführt werden sollen. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverCreateAsync($cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups, $template, $hostname = null, $password = null, $ssh_keys = null, $commands = null)
    {
        return $this->vserverCreateAsyncWithHttpInfo($cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups, $template, $hostname, $password, $ssh_keys, $commands)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverCreateAsyncWithHttpInfo
     *
     * Neuen vServer bestellen
     *
     * @param  int $cores Anzahl der Kerne (required)
     * @param  int $memory Arbeitsspeicher in MB (required)
     * @param  int $disk SSD Speicher in GB (required)
     * @param  int $ip_addresses Anzahl der IPv4-Adressen (required)
     * @param  int $ip6_addresses Anzahl der IPv6 Adressen (required)
     * @param  int $backups Anzahl der Backup-Slots (required)
     * @param  int $template Template-ID aus /vserver/templates (required)
     * @param  string $hostname Hostname des Servers (optional)
     * @param  string $password Rootpasswort des Servers (optional)
     * @param  string[] $ssh_keys Public-Keys, welche auf dem Server eingerichtet werden sollen. (optional)
     * @param  string[] $commands Benutzerdefinierte Befehle, welche nach der Installation auf dem Server ausgeführt werden sollen. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverCreateAsyncWithHttpInfo($cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups, $template, $hostname = null, $password = null, $ssh_keys = null, $commands = null)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverCreateRequest($cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups, $template, $hostname, $password, $ssh_keys, $commands);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverCreate'
     *
     * @param  int $cores Anzahl der Kerne (required)
     * @param  int $memory Arbeitsspeicher in MB (required)
     * @param  int $disk SSD Speicher in GB (required)
     * @param  int $ip_addresses Anzahl der IPv4-Adressen (required)
     * @param  int $ip6_addresses Anzahl der IPv6 Adressen (required)
     * @param  int $backups Anzahl der Backup-Slots (required)
     * @param  int $template Template-ID aus /vserver/templates (required)
     * @param  string $hostname Hostname des Servers (optional)
     * @param  string $password Rootpasswort des Servers (optional)
     * @param  string[] $ssh_keys Public-Keys, welche auf dem Server eingerichtet werden sollen. (optional)
     * @param  string[] $commands Benutzerdefinierte Befehle, welche nach der Installation auf dem Server ausgeführt werden sollen. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverCreateRequest($cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups, $template, $hostname = null, $password = null, $ssh_keys = null, $commands = null)
    {
        // verify the required parameter 'cores' is set
        if ($cores === null || (is_array($cores) && count($cores) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cores when calling vserverCreate'
            );
        }
        // verify the required parameter 'memory' is set
        if ($memory === null || (is_array($memory) && count($memory) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memory when calling vserverCreate'
            );
        }
        // verify the required parameter 'disk' is set
        if ($disk === null || (is_array($disk) && count($disk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $disk when calling vserverCreate'
            );
        }
        // verify the required parameter 'ip_addresses' is set
        if ($ip_addresses === null || (is_array($ip_addresses) && count($ip_addresses) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ip_addresses when calling vserverCreate'
            );
        }
        // verify the required parameter 'ip6_addresses' is set
        if ($ip6_addresses === null || (is_array($ip6_addresses) && count($ip6_addresses) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ip6_addresses when calling vserverCreate'
            );
        }
        // verify the required parameter 'backups' is set
        if ($backups === null || (is_array($backups) && count($backups) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $backups when calling vserverCreate'
            );
        }
        // verify the required parameter 'template' is set
        if ($template === null || (is_array($template) && count($template) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template when calling vserverCreate'
            );
        }

        $resourcePath = '/vserver/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cores !== null) {
            $queryParams['cores'] = ObjectSerializer::toQueryValue($cores, null);
        }
        // query params
        if ($memory !== null) {
            $queryParams['memory'] = ObjectSerializer::toQueryValue($memory, null);
        }
        // query params
        if ($disk !== null) {
            $queryParams['disk'] = ObjectSerializer::toQueryValue($disk, null);
        }
        // query params
        if ($ip_addresses !== null) {
            $queryParams['ip_addresses'] = ObjectSerializer::toQueryValue($ip_addresses, null);
        }
        // query params
        if ($ip6_addresses !== null) {
            $queryParams['ip6_addresses'] = ObjectSerializer::toQueryValue($ip6_addresses, null);
        }
        // query params
        if ($backups !== null) {
            $queryParams['backups'] = ObjectSerializer::toQueryValue($backups, null);
        }
        // query params
        if ($template !== null) {
            $queryParams['template'] = ObjectSerializer::toQueryValue($template, null);
        }
        // query params
        if ($hostname !== null) {
            $queryParams['hostname'] = ObjectSerializer::toQueryValue($hostname, null);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password, null);
        }
        // query params
        if (is_array($ssh_keys)) {
            $ssh_keys = ObjectSerializer::serializeCollection($ssh_keys, 'csv', true);
        }
        if ($ssh_keys !== null) {
            $queryParams['ssh_keys'] = ObjectSerializer::toQueryValue($ssh_keys, null);
        }
        // query params
        if (is_array($commands)) {
            $commands = ObjectSerializer::serializeCollection($commands, 'csv', true);
        }
        if ($commands !== null) {
            $queryParams['commands'] = ObjectSerializer::toQueryValue($commands, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverDdosAlert
     *
     * DDoS Alerts zum vServer abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\DdosAlert[]
     */
    public function vserverDdosAlert($server_id)
    {
        list($response) = $this->vserverDdosAlertWithHttpInfo($server_id);
        return $response;
    }

    /**
     * Operation vserverDdosAlertWithHttpInfo
     *
     * DDoS Alerts zum vServer abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\DdosAlert[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverDdosAlertWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\DdosAlert[]';
        $request = $this->vserverDdosAlertRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\DdosAlert[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverDdosAlertAsync
     *
     * DDoS Alerts zum vServer abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverDdosAlertAsync($server_id)
    {
        return $this->vserverDdosAlertAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverDdosAlertAsyncWithHttpInfo
     *
     * DDoS Alerts zum vServer abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverDdosAlertAsyncWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\DdosAlert[]';
        $request = $this->vserverDdosAlertRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverDdosAlert'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverDdosAlertRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverDdosAlert'
            );
        }

        $resourcePath = '/vserver/ddos_alert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverDelete
     *
     * vServer löschen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\Vserver[]
     */
    public function vserverDelete($server_id)
    {
        list($response) = $this->vserverDeleteWithHttpInfo($server_id);
        return $response;
    }

    /**
     * Operation vserverDeleteWithHttpInfo
     *
     * vServer löschen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\Vserver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverDeleteWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverDeleteRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\Vserver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverDeleteAsync
     *
     * vServer löschen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverDeleteAsync($server_id)
    {
        return $this->vserverDeleteAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverDeleteAsyncWithHttpInfo
     *
     * vServer löschen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverDeleteAsyncWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverDeleteRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverDelete'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverDeleteRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverDelete'
            );
        }

        $resourcePath = '/vserver/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverGraph
     *
     * vServer Graphdaten abrufen
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $timeframe Zeitraum (hour, day, week, month, year) (optional)
     * @param  string $cf Werte-Typ (AVERAGE, MAX) (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function vserverGraph($server_id, $timeframe = null, $cf = null)
    {
        $this->vserverGraphWithHttpInfo($server_id, $timeframe, $cf);
    }

    /**
     * Operation vserverGraphWithHttpInfo
     *
     * vServer Graphdaten abrufen
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $timeframe Zeitraum (hour, day, week, month, year) (optional)
     * @param  string $cf Werte-Typ (AVERAGE, MAX) (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverGraphWithHttpInfo($server_id, $timeframe = null, $cf = null)
    {
        $returnType = '';
        $request = $this->vserverGraphRequest($server_id, $timeframe, $cf);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation vserverGraphAsync
     *
     * vServer Graphdaten abrufen
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $timeframe Zeitraum (hour, day, week, month, year) (optional)
     * @param  string $cf Werte-Typ (AVERAGE, MAX) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverGraphAsync($server_id, $timeframe = null, $cf = null)
    {
        return $this->vserverGraphAsyncWithHttpInfo($server_id, $timeframe, $cf)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverGraphAsyncWithHttpInfo
     *
     * vServer Graphdaten abrufen
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $timeframe Zeitraum (hour, day, week, month, year) (optional)
     * @param  string $cf Werte-Typ (AVERAGE, MAX) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverGraphAsyncWithHttpInfo($server_id, $timeframe = null, $cf = null)
    {
        $returnType = '';
        $request = $this->vserverGraphRequest($server_id, $timeframe, $cf);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverGraph'
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $timeframe Zeitraum (hour, day, week, month, year) (optional)
     * @param  string $cf Werte-Typ (AVERAGE, MAX) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverGraphRequest($server_id, $timeframe = null, $cf = null)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverGraph'
            );
        }

        $resourcePath = '/vserver/graph';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }
        // query params
        if ($timeframe !== null) {
            $queryParams['timeframe'] = ObjectSerializer::toQueryValue($timeframe, null);
        }
        // query params
        if ($cf !== null) {
            $queryParams['cf'] = ObjectSerializer::toQueryValue($cf, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverGraphImage
     *
     * vServer Graphdaten als PNG abrufen
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $timeframe Zeitraum (hour, day, week, month, year) (optional)
     * @param  string $cf Werte-Typ (AVERAGE, MAX) (optional)
     * @param  string[] $ds Werte (maxcpu, cpu, maxmem, mem, maxdisk, disk, netin, netout, diskread, diskwrite) (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function vserverGraphImage($server_id, $timeframe = null, $cf = null, $ds = null)
    {
        $this->vserverGraphImageWithHttpInfo($server_id, $timeframe, $cf, $ds);
    }

    /**
     * Operation vserverGraphImageWithHttpInfo
     *
     * vServer Graphdaten als PNG abrufen
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $timeframe Zeitraum (hour, day, week, month, year) (optional)
     * @param  string $cf Werte-Typ (AVERAGE, MAX) (optional)
     * @param  string[] $ds Werte (maxcpu, cpu, maxmem, mem, maxdisk, disk, netin, netout, diskread, diskwrite) (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverGraphImageWithHttpInfo($server_id, $timeframe = null, $cf = null, $ds = null)
    {
        $returnType = '';
        $request = $this->vserverGraphImageRequest($server_id, $timeframe, $cf, $ds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation vserverGraphImageAsync
     *
     * vServer Graphdaten als PNG abrufen
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $timeframe Zeitraum (hour, day, week, month, year) (optional)
     * @param  string $cf Werte-Typ (AVERAGE, MAX) (optional)
     * @param  string[] $ds Werte (maxcpu, cpu, maxmem, mem, maxdisk, disk, netin, netout, diskread, diskwrite) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverGraphImageAsync($server_id, $timeframe = null, $cf = null, $ds = null)
    {
        return $this->vserverGraphImageAsyncWithHttpInfo($server_id, $timeframe, $cf, $ds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverGraphImageAsyncWithHttpInfo
     *
     * vServer Graphdaten als PNG abrufen
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $timeframe Zeitraum (hour, day, week, month, year) (optional)
     * @param  string $cf Werte-Typ (AVERAGE, MAX) (optional)
     * @param  string[] $ds Werte (maxcpu, cpu, maxmem, mem, maxdisk, disk, netin, netout, diskread, diskwrite) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverGraphImageAsyncWithHttpInfo($server_id, $timeframe = null, $cf = null, $ds = null)
    {
        $returnType = '';
        $request = $this->vserverGraphImageRequest($server_id, $timeframe, $cf, $ds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverGraphImage'
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $timeframe Zeitraum (hour, day, week, month, year) (optional)
     * @param  string $cf Werte-Typ (AVERAGE, MAX) (optional)
     * @param  string[] $ds Werte (maxcpu, cpu, maxmem, mem, maxdisk, disk, netin, netout, diskread, diskwrite) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverGraphImageRequest($server_id, $timeframe = null, $cf = null, $ds = null)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverGraphImage'
            );
        }

        $resourcePath = '/vserver/graph_image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }
        // query params
        if ($timeframe !== null) {
            $queryParams['timeframe'] = ObjectSerializer::toQueryValue($timeframe, null);
        }
        // query params
        if ($cf !== null) {
            $queryParams['cf'] = ObjectSerializer::toQueryValue($cf, null);
        }
        // query params
        if (is_array($ds)) {
            $ds = ObjectSerializer::serializeCollection($ds, 'csv', true);
        }
        if ($ds !== null) {
            $queryParams['ds'] = ObjectSerializer::toQueryValue($ds, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverIndex
     *
     * Alle vServer abrufen
     *
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\Vserver[]
     */
    public function vserverIndex()
    {
        list($response) = $this->vserverIndexWithHttpInfo();
        return $response;
    }

    /**
     * Operation vserverIndexWithHttpInfo
     *
     * Alle vServer abrufen
     *
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\Vserver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverIndexWithHttpInfo()
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverIndexRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\Vserver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverIndexAsync
     *
     * Alle vServer abrufen
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverIndexAsync()
    {
        return $this->vserverIndexAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverIndexAsyncWithHttpInfo
     *
     * Alle vServer abrufen
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverIndexAsyncWithHttpInfo()
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverIndexRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverIndex'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverIndexRequest()
    {

        $resourcePath = '/vserver';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverInstallation
     *
     * vServer Installationen abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\PxeAction[]
     */
    public function vserverInstallation($server_id)
    {
        list($response) = $this->vserverInstallationWithHttpInfo($server_id);
        return $response;
    }

    /**
     * Operation vserverInstallationWithHttpInfo
     *
     * vServer Installationen abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\PxeAction[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverInstallationWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\PxeAction[]';
        $request = $this->vserverInstallationRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\PxeAction[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverInstallationAsync
     *
     * vServer Installationen abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverInstallationAsync($server_id)
    {
        return $this->vserverInstallationAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverInstallationAsyncWithHttpInfo
     *
     * vServer Installationen abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverInstallationAsyncWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\PxeAction[]';
        $request = $this->vserverInstallationRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverInstallation'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverInstallationRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverInstallation'
            );
        }

        $resourcePath = '/vserver/installation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverNetworkReset
     *
     * Netzwerk zurücksetzen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function vserverNetworkReset($server_id)
    {
        $this->vserverNetworkResetWithHttpInfo($server_id);
    }

    /**
     * Operation vserverNetworkResetWithHttpInfo
     *
     * Netzwerk zurücksetzen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverNetworkResetWithHttpInfo($server_id)
    {
        $returnType = '';
        $request = $this->vserverNetworkResetRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation vserverNetworkResetAsync
     *
     * Netzwerk zurücksetzen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverNetworkResetAsync($server_id)
    {
        return $this->vserverNetworkResetAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverNetworkResetAsyncWithHttpInfo
     *
     * Netzwerk zurücksetzen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverNetworkResetAsyncWithHttpInfo($server_id)
    {
        $returnType = '';
        $request = $this->vserverNetworkResetRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverNetworkReset'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverNetworkResetRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverNetworkReset'
            );
        }

        $resourcePath = '/vserver/network_reset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverOperation
     *
     * vServer Operationen abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\PxeAction[]
     */
    public function vserverOperation($server_id)
    {
        list($response) = $this->vserverOperationWithHttpInfo($server_id);
        return $response;
    }

    /**
     * Operation vserverOperationWithHttpInfo
     *
     * vServer Operationen abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\PxeAction[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverOperationWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\PxeAction[]';
        $request = $this->vserverOperationRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\PxeAction[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverOperationAsync
     *
     * vServer Operationen abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverOperationAsync($server_id)
    {
        return $this->vserverOperationAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverOperationAsyncWithHttpInfo
     *
     * vServer Operationen abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverOperationAsyncWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\PxeAction[]';
        $request = $this->vserverOperationRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverOperation'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverOperationRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverOperation'
            );
        }

        $resourcePath = '/vserver/operation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverOperations
     *
     * Operation-Templates abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\PxeTemplate[]
     */
    public function vserverOperations($server_id)
    {
        list($response) = $this->vserverOperationsWithHttpInfo($server_id);
        return $response;
    }

    /**
     * Operation vserverOperationsWithHttpInfo
     *
     * Operation-Templates abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\PxeTemplate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverOperationsWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\PxeTemplate[]';
        $request = $this->vserverOperationsRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\PxeTemplate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverOperationsAsync
     *
     * Operation-Templates abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverOperationsAsync($server_id)
    {
        return $this->vserverOperationsAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverOperationsAsyncWithHttpInfo
     *
     * Operation-Templates abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverOperationsAsyncWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\PxeTemplate[]';
        $request = $this->vserverOperationsRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverOperations'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverOperationsRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverOperations'
            );
        }

        $resourcePath = '/vserver/operations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverPasswordReset
     *
     * Passwort zurücksetzen
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $password Neues Rootpasswort des Servers (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function vserverPasswordReset($server_id, $password = null)
    {
        $this->vserverPasswordResetWithHttpInfo($server_id, $password);
    }

    /**
     * Operation vserverPasswordResetWithHttpInfo
     *
     * Passwort zurücksetzen
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $password Neues Rootpasswort des Servers (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverPasswordResetWithHttpInfo($server_id, $password = null)
    {
        $returnType = '';
        $request = $this->vserverPasswordResetRequest($server_id, $password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation vserverPasswordResetAsync
     *
     * Passwort zurücksetzen
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $password Neues Rootpasswort des Servers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverPasswordResetAsync($server_id, $password = null)
    {
        return $this->vserverPasswordResetAsyncWithHttpInfo($server_id, $password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverPasswordResetAsyncWithHttpInfo
     *
     * Passwort zurücksetzen
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $password Neues Rootpasswort des Servers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverPasswordResetAsyncWithHttpInfo($server_id, $password = null)
    {
        $returnType = '';
        $request = $this->vserverPasswordResetRequest($server_id, $password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverPasswordReset'
     *
     * @param  int $server_id Server-ID (required)
     * @param  string $password Neues Rootpasswort des Servers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverPasswordResetRequest($server_id, $password = null)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverPasswordReset'
            );
        }

        $resourcePath = '/vserver/password_reset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverReinstall
     *
     * vServer neuinstallieren
     *
     * @param  int $server_id Server-ID (required)
     * @param  int $template Template-ID aus /vserver/templates (required)
     * @param  string $hostname Hostname des Servers (optional)
     * @param  string $password Rootpasswort des Servers (optional)
     * @param  string[] $ssh_keys Public-Keys, welche auf dem Server eingerichtet werden sollen. (optional)
     * @param  string[] $commands Benutzerdefinierte Befehle, welche nach der Installation auf dem Server ausgeführt werden sollen. (optional)
     * @param  string[] $ip_addresses Array von IPv4-Adressen, welche automatisch eingerichtet werden sollen. Standardmäßig werden sämtliche IPv4-Adressen eingerichtet. (optional)
     * @param  string[] $ip6_addresses Array von IPv6-Adressen, welche automatisch eingerichtet werden sollen. Standardmäßig werden sämtliche IPv6-Adressen eingerichtet. (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\Vserver[]
     */
    public function vserverReinstall($server_id, $template, $hostname = null, $password = null, $ssh_keys = null, $commands = null, $ip_addresses = null, $ip6_addresses = null)
    {
        list($response) = $this->vserverReinstallWithHttpInfo($server_id, $template, $hostname, $password, $ssh_keys, $commands, $ip_addresses, $ip6_addresses);
        return $response;
    }

    /**
     * Operation vserverReinstallWithHttpInfo
     *
     * vServer neuinstallieren
     *
     * @param  int $server_id Server-ID (required)
     * @param  int $template Template-ID aus /vserver/templates (required)
     * @param  string $hostname Hostname des Servers (optional)
     * @param  string $password Rootpasswort des Servers (optional)
     * @param  string[] $ssh_keys Public-Keys, welche auf dem Server eingerichtet werden sollen. (optional)
     * @param  string[] $commands Benutzerdefinierte Befehle, welche nach der Installation auf dem Server ausgeführt werden sollen. (optional)
     * @param  string[] $ip_addresses Array von IPv4-Adressen, welche automatisch eingerichtet werden sollen. Standardmäßig werden sämtliche IPv4-Adressen eingerichtet. (optional)
     * @param  string[] $ip6_addresses Array von IPv6-Adressen, welche automatisch eingerichtet werden sollen. Standardmäßig werden sämtliche IPv6-Adressen eingerichtet. (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\Vserver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverReinstallWithHttpInfo($server_id, $template, $hostname = null, $password = null, $ssh_keys = null, $commands = null, $ip_addresses = null, $ip6_addresses = null)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverReinstallRequest($server_id, $template, $hostname, $password, $ssh_keys, $commands, $ip_addresses, $ip6_addresses);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\Vserver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverReinstallAsync
     *
     * vServer neuinstallieren
     *
     * @param  int $server_id Server-ID (required)
     * @param  int $template Template-ID aus /vserver/templates (required)
     * @param  string $hostname Hostname des Servers (optional)
     * @param  string $password Rootpasswort des Servers (optional)
     * @param  string[] $ssh_keys Public-Keys, welche auf dem Server eingerichtet werden sollen. (optional)
     * @param  string[] $commands Benutzerdefinierte Befehle, welche nach der Installation auf dem Server ausgeführt werden sollen. (optional)
     * @param  string[] $ip_addresses Array von IPv4-Adressen, welche automatisch eingerichtet werden sollen. Standardmäßig werden sämtliche IPv4-Adressen eingerichtet. (optional)
     * @param  string[] $ip6_addresses Array von IPv6-Adressen, welche automatisch eingerichtet werden sollen. Standardmäßig werden sämtliche IPv6-Adressen eingerichtet. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverReinstallAsync($server_id, $template, $hostname = null, $password = null, $ssh_keys = null, $commands = null, $ip_addresses = null, $ip6_addresses = null)
    {
        return $this->vserverReinstallAsyncWithHttpInfo($server_id, $template, $hostname, $password, $ssh_keys, $commands, $ip_addresses, $ip6_addresses)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverReinstallAsyncWithHttpInfo
     *
     * vServer neuinstallieren
     *
     * @param  int $server_id Server-ID (required)
     * @param  int $template Template-ID aus /vserver/templates (required)
     * @param  string $hostname Hostname des Servers (optional)
     * @param  string $password Rootpasswort des Servers (optional)
     * @param  string[] $ssh_keys Public-Keys, welche auf dem Server eingerichtet werden sollen. (optional)
     * @param  string[] $commands Benutzerdefinierte Befehle, welche nach der Installation auf dem Server ausgeführt werden sollen. (optional)
     * @param  string[] $ip_addresses Array von IPv4-Adressen, welche automatisch eingerichtet werden sollen. Standardmäßig werden sämtliche IPv4-Adressen eingerichtet. (optional)
     * @param  string[] $ip6_addresses Array von IPv6-Adressen, welche automatisch eingerichtet werden sollen. Standardmäßig werden sämtliche IPv6-Adressen eingerichtet. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverReinstallAsyncWithHttpInfo($server_id, $template, $hostname = null, $password = null, $ssh_keys = null, $commands = null, $ip_addresses = null, $ip6_addresses = null)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverReinstallRequest($server_id, $template, $hostname, $password, $ssh_keys, $commands, $ip_addresses, $ip6_addresses);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverReinstall'
     *
     * @param  int $server_id Server-ID (required)
     * @param  int $template Template-ID aus /vserver/templates (required)
     * @param  string $hostname Hostname des Servers (optional)
     * @param  string $password Rootpasswort des Servers (optional)
     * @param  string[] $ssh_keys Public-Keys, welche auf dem Server eingerichtet werden sollen. (optional)
     * @param  string[] $commands Benutzerdefinierte Befehle, welche nach der Installation auf dem Server ausgeführt werden sollen. (optional)
     * @param  string[] $ip_addresses Array von IPv4-Adressen, welche automatisch eingerichtet werden sollen. Standardmäßig werden sämtliche IPv4-Adressen eingerichtet. (optional)
     * @param  string[] $ip6_addresses Array von IPv6-Adressen, welche automatisch eingerichtet werden sollen. Standardmäßig werden sämtliche IPv6-Adressen eingerichtet. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverReinstallRequest($server_id, $template, $hostname = null, $password = null, $ssh_keys = null, $commands = null, $ip_addresses = null, $ip6_addresses = null)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverReinstall'
            );
        }
        // verify the required parameter 'template' is set
        if ($template === null || (is_array($template) && count($template) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template when calling vserverReinstall'
            );
        }

        $resourcePath = '/vserver/reinstall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }
        // query params
        if ($template !== null) {
            $queryParams['template'] = ObjectSerializer::toQueryValue($template, null);
        }
        // query params
        if ($hostname !== null) {
            $queryParams['hostname'] = ObjectSerializer::toQueryValue($hostname, null);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password, null);
        }
        // query params
        if (is_array($ssh_keys)) {
            $ssh_keys = ObjectSerializer::serializeCollection($ssh_keys, 'csv', true);
        }
        if ($ssh_keys !== null) {
            $queryParams['ssh_keys'] = ObjectSerializer::toQueryValue($ssh_keys, null);
        }
        // query params
        if (is_array($commands)) {
            $commands = ObjectSerializer::serializeCollection($commands, 'csv', true);
        }
        if ($commands !== null) {
            $queryParams['commands'] = ObjectSerializer::toQueryValue($commands, null);
        }
        // query params
        if (is_array($ip_addresses)) {
            $ip_addresses = ObjectSerializer::serializeCollection($ip_addresses, 'csv', true);
        }
        if ($ip_addresses !== null) {
            $queryParams['ip_addresses'] = ObjectSerializer::toQueryValue($ip_addresses, null);
        }
        // query params
        if (is_array($ip6_addresses)) {
            $ip6_addresses = ObjectSerializer::serializeCollection($ip6_addresses, 'csv', true);
        }
        if ($ip6_addresses !== null) {
            $queryParams['ip6_addresses'] = ObjectSerializer::toQueryValue($ip6_addresses, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverRestart
     *
     * vServer neustarten
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\Vserver[]
     */
    public function vserverRestart($server_id)
    {
        list($response) = $this->vserverRestartWithHttpInfo($server_id);
        return $response;
    }

    /**
     * Operation vserverRestartWithHttpInfo
     *
     * vServer neustarten
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\Vserver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverRestartWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverRestartRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\Vserver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverRestartAsync
     *
     * vServer neustarten
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverRestartAsync($server_id)
    {
        return $this->vserverRestartAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverRestartAsyncWithHttpInfo
     *
     * vServer neustarten
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverRestartAsyncWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverRestartRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverRestart'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverRestartRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverRestart'
            );
        }

        $resourcePath = '/vserver/restart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverSettings
     *
     * Einstellungen von vServer speichern
     *
     * @param  int $server_id Server-ID, wofür die Einstellungen speichert werden sollen (required)
     * @param  string $title Titel des vServers (optional)
     * @param  string $hostname Hostname des vServers (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\Vserver[]
     */
    public function vserverSettings($server_id, $title = null, $hostname = null)
    {
        list($response) = $this->vserverSettingsWithHttpInfo($server_id, $title, $hostname);
        return $response;
    }

    /**
     * Operation vserverSettingsWithHttpInfo
     *
     * Einstellungen von vServer speichern
     *
     * @param  int $server_id Server-ID, wofür die Einstellungen speichert werden sollen (required)
     * @param  string $title Titel des vServers (optional)
     * @param  string $hostname Hostname des vServers (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\Vserver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverSettingsWithHttpInfo($server_id, $title = null, $hostname = null)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverSettingsRequest($server_id, $title, $hostname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\Vserver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverSettingsAsync
     *
     * Einstellungen von vServer speichern
     *
     * @param  int $server_id Server-ID, wofür die Einstellungen speichert werden sollen (required)
     * @param  string $title Titel des vServers (optional)
     * @param  string $hostname Hostname des vServers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverSettingsAsync($server_id, $title = null, $hostname = null)
    {
        return $this->vserverSettingsAsyncWithHttpInfo($server_id, $title, $hostname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverSettingsAsyncWithHttpInfo
     *
     * Einstellungen von vServer speichern
     *
     * @param  int $server_id Server-ID, wofür die Einstellungen speichert werden sollen (required)
     * @param  string $title Titel des vServers (optional)
     * @param  string $hostname Hostname des vServers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverSettingsAsyncWithHttpInfo($server_id, $title = null, $hostname = null)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverSettingsRequest($server_id, $title, $hostname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverSettings'
     *
     * @param  int $server_id Server-ID, wofür die Einstellungen speichert werden sollen (required)
     * @param  string $title Titel des vServers (optional)
     * @param  string $hostname Hostname des vServers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverSettingsRequest($server_id, $title = null, $hostname = null)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverSettings'
            );
        }

        $resourcePath = '/vserver/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title, null);
        }
        // query params
        if ($hostname !== null) {
            $queryParams['hostname'] = ObjectSerializer::toQueryValue($hostname, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverShow
     *
     * Einzelnen vServer abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\Vserver[]
     */
    public function vserverShow($server_id)
    {
        list($response) = $this->vserverShowWithHttpInfo($server_id);
        return $response;
    }

    /**
     * Operation vserverShowWithHttpInfo
     *
     * Einzelnen vServer abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\Vserver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverShowWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverShowRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\Vserver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverShowAsync
     *
     * Einzelnen vServer abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverShowAsync($server_id)
    {
        return $this->vserverShowAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverShowAsyncWithHttpInfo
     *
     * Einzelnen vServer abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverShowAsyncWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverShowRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverShow'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverShowRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverShow'
            );
        }

        $resourcePath = '/vserver/show';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverShutdown
     *
     * vServer herunterfahren
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\Vserver[]
     */
    public function vserverShutdown($server_id)
    {
        list($response) = $this->vserverShutdownWithHttpInfo($server_id);
        return $response;
    }

    /**
     * Operation vserverShutdownWithHttpInfo
     *
     * vServer herunterfahren
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\Vserver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverShutdownWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverShutdownRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\Vserver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverShutdownAsync
     *
     * vServer herunterfahren
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverShutdownAsync($server_id)
    {
        return $this->vserverShutdownAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverShutdownAsyncWithHttpInfo
     *
     * vServer herunterfahren
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverShutdownAsyncWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverShutdownRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverShutdown'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverShutdownRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverShutdown'
            );
        }

        $resourcePath = '/vserver/shutdown';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverStart
     *
     * vServer starten
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\Vserver[]
     */
    public function vserverStart($server_id)
    {
        list($response) = $this->vserverStartWithHttpInfo($server_id);
        return $response;
    }

    /**
     * Operation vserverStartWithHttpInfo
     *
     * vServer starten
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\Vserver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverStartWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverStartRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\Vserver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverStartAsync
     *
     * vServer starten
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverStartAsync($server_id)
    {
        return $this->vserverStartAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverStartAsyncWithHttpInfo
     *
     * vServer starten
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverStartAsyncWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverStartRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverStart'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverStartRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverStart'
            );
        }

        $resourcePath = '/vserver/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverStatus
     *
     * vServer Status abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\VserverStatus[]
     */
    public function vserverStatus($server_id)
    {
        list($response) = $this->vserverStatusWithHttpInfo($server_id);
        return $response;
    }

    /**
     * Operation vserverStatusWithHttpInfo
     *
     * vServer Status abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\VserverStatus[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverStatusWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\VserverStatus[]';
        $request = $this->vserverStatusRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\VserverStatus[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverStatusAsync
     *
     * vServer Status abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverStatusAsync($server_id)
    {
        return $this->vserverStatusAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverStatusAsyncWithHttpInfo
     *
     * vServer Status abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverStatusAsyncWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\VserverStatus[]';
        $request = $this->vserverStatusRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverStatus'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverStatusRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverStatus'
            );
        }

        $resourcePath = '/vserver/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverStop
     *
     * vServer stoppen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\Vserver[]
     */
    public function vserverStop($server_id)
    {
        list($response) = $this->vserverStopWithHttpInfo($server_id);
        return $response;
    }

    /**
     * Operation vserverStopWithHttpInfo
     *
     * vServer stoppen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\Vserver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverStopWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverStopRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\Vserver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverStopAsync
     *
     * vServer stoppen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverStopAsync($server_id)
    {
        return $this->vserverStopAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverStopAsyncWithHttpInfo
     *
     * vServer stoppen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverStopAsyncWithHttpInfo($server_id)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverStopRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverStop'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverStopRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverStop'
            );
        }

        $resourcePath = '/vserver/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverTemplates
     *
     * Installations-Templates abrufen
     *
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\PxeTemplate[]
     */
    public function vserverTemplates()
    {
        list($response) = $this->vserverTemplatesWithHttpInfo();
        return $response;
    }

    /**
     * Operation vserverTemplatesWithHttpInfo
     *
     * Installations-Templates abrufen
     *
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\PxeTemplate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverTemplatesWithHttpInfo()
    {
        $returnType = '\csakel\RUBClient\Model\PxeTemplate[]';
        $request = $this->vserverTemplatesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\PxeTemplate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverTemplatesAsync
     *
     * Installations-Templates abrufen
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverTemplatesAsync()
    {
        return $this->vserverTemplatesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverTemplatesAsyncWithHttpInfo
     *
     * Installations-Templates abrufen
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverTemplatesAsyncWithHttpInfo()
    {
        $returnType = '\csakel\RUBClient\Model\PxeTemplate[]';
        $request = $this->vserverTemplatesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverTemplates'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverTemplatesRequest()
    {

        $resourcePath = '/vserver/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverTraffic
     *
     * vServer Traffic abrufen
     *
     * @param  int $server_id Server-ID (required)
     * @param  \DateTime $start_date Startdatum für Traffic Zeitraum (required)
     * @param  \DateTime $end_date Enddatum für Traffic Zeitraum (required)
     * @param  string $group_by Gruppierung von Traffic Werten für den angefragten Zeitraum.  Mögliche Werte: MONTH &#x3D;&gt; monatliche Gruppierung (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\VserverTraffic[]
     */
    public function vserverTraffic($server_id, $start_date, $end_date, $group_by = null)
    {
        list($response) = $this->vserverTrafficWithHttpInfo($server_id, $start_date, $end_date, $group_by);
        return $response;
    }

    /**
     * Operation vserverTrafficWithHttpInfo
     *
     * vServer Traffic abrufen
     *
     * @param  int $server_id Server-ID (required)
     * @param  \DateTime $start_date Startdatum für Traffic Zeitraum (required)
     * @param  \DateTime $end_date Enddatum für Traffic Zeitraum (required)
     * @param  string $group_by Gruppierung von Traffic Werten für den angefragten Zeitraum.  Mögliche Werte: MONTH &#x3D;&gt; monatliche Gruppierung (optional)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\VserverTraffic[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverTrafficWithHttpInfo($server_id, $start_date, $end_date, $group_by = null)
    {
        $returnType = '\csakel\RUBClient\Model\VserverTraffic[]';
        $request = $this->vserverTrafficRequest($server_id, $start_date, $end_date, $group_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\VserverTraffic[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverTrafficAsync
     *
     * vServer Traffic abrufen
     *
     * @param  int $server_id Server-ID (required)
     * @param  \DateTime $start_date Startdatum für Traffic Zeitraum (required)
     * @param  \DateTime $end_date Enddatum für Traffic Zeitraum (required)
     * @param  string $group_by Gruppierung von Traffic Werten für den angefragten Zeitraum.  Mögliche Werte: MONTH &#x3D;&gt; monatliche Gruppierung (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverTrafficAsync($server_id, $start_date, $end_date, $group_by = null)
    {
        return $this->vserverTrafficAsyncWithHttpInfo($server_id, $start_date, $end_date, $group_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverTrafficAsyncWithHttpInfo
     *
     * vServer Traffic abrufen
     *
     * @param  int $server_id Server-ID (required)
     * @param  \DateTime $start_date Startdatum für Traffic Zeitraum (required)
     * @param  \DateTime $end_date Enddatum für Traffic Zeitraum (required)
     * @param  string $group_by Gruppierung von Traffic Werten für den angefragten Zeitraum.  Mögliche Werte: MONTH &#x3D;&gt; monatliche Gruppierung (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverTrafficAsyncWithHttpInfo($server_id, $start_date, $end_date, $group_by = null)
    {
        $returnType = '\csakel\RUBClient\Model\VserverTraffic[]';
        $request = $this->vserverTrafficRequest($server_id, $start_date, $end_date, $group_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverTraffic'
     *
     * @param  int $server_id Server-ID (required)
     * @param  \DateTime $start_date Startdatum für Traffic Zeitraum (required)
     * @param  \DateTime $end_date Enddatum für Traffic Zeitraum (required)
     * @param  string $group_by Gruppierung von Traffic Werten für den angefragten Zeitraum.  Mögliche Werte: MONTH &#x3D;&gt; monatliche Gruppierung (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverTrafficRequest($server_id, $start_date, $end_date, $group_by = null)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverTraffic'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling vserverTraffic'
            );
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling vserverTraffic'
            );
        }

        $resourcePath = '/vserver/traffic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($start_date, 'date');
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = ObjectSerializer::toQueryValue($end_date, 'date');
        }
        // query params
        if ($group_by !== null) {
            $queryParams['groupBy'] = ObjectSerializer::toQueryValue($group_by, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverUpgrade
     *
     * vServer Konfiguration ändern
     *
     * @param  int $server_id Server-ID (required)
     * @param  int $cores Anzahl der Kerne (required)
     * @param  int $memory Arbeitsspeicher in MB (required)
     * @param  int $disk SSD Speicher in GB (required)
     * @param  int $ip_addresses Anzahl der IPv4-Adressen (required)
     * @param  int $ip6_addresses Anzahl der IPv6 Adressen (required)
     * @param  int $backups Anzahl der Backup-Slots (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \csakel\RUBClient\Model\Vserver[]
     */
    public function vserverUpgrade($server_id, $cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups)
    {
        list($response) = $this->vserverUpgradeWithHttpInfo($server_id, $cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups);
        return $response;
    }

    /**
     * Operation vserverUpgradeWithHttpInfo
     *
     * vServer Konfiguration ändern
     *
     * @param  int $server_id Server-ID (required)
     * @param  int $cores Anzahl der Kerne (required)
     * @param  int $memory Arbeitsspeicher in MB (required)
     * @param  int $disk SSD Speicher in GB (required)
     * @param  int $ip_addresses Anzahl der IPv4-Adressen (required)
     * @param  int $ip6_addresses Anzahl der IPv6 Adressen (required)
     * @param  int $backups Anzahl der Backup-Slots (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \csakel\RUBClient\Model\Vserver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverUpgradeWithHttpInfo($server_id, $cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverUpgradeRequest($server_id, $cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\csakel\RUBClient\Model\Vserver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vserverUpgradeAsync
     *
     * vServer Konfiguration ändern
     *
     * @param  int $server_id Server-ID (required)
     * @param  int $cores Anzahl der Kerne (required)
     * @param  int $memory Arbeitsspeicher in MB (required)
     * @param  int $disk SSD Speicher in GB (required)
     * @param  int $ip_addresses Anzahl der IPv4-Adressen (required)
     * @param  int $ip6_addresses Anzahl der IPv6 Adressen (required)
     * @param  int $backups Anzahl der Backup-Slots (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverUpgradeAsync($server_id, $cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups)
    {
        return $this->vserverUpgradeAsyncWithHttpInfo($server_id, $cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverUpgradeAsyncWithHttpInfo
     *
     * vServer Konfiguration ändern
     *
     * @param  int $server_id Server-ID (required)
     * @param  int $cores Anzahl der Kerne (required)
     * @param  int $memory Arbeitsspeicher in MB (required)
     * @param  int $disk SSD Speicher in GB (required)
     * @param  int $ip_addresses Anzahl der IPv4-Adressen (required)
     * @param  int $ip6_addresses Anzahl der IPv6 Adressen (required)
     * @param  int $backups Anzahl der Backup-Slots (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverUpgradeAsyncWithHttpInfo($server_id, $cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups)
    {
        $returnType = '\csakel\RUBClient\Model\Vserver[]';
        $request = $this->vserverUpgradeRequest($server_id, $cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverUpgrade'
     *
     * @param  int $server_id Server-ID (required)
     * @param  int $cores Anzahl der Kerne (required)
     * @param  int $memory Arbeitsspeicher in MB (required)
     * @param  int $disk SSD Speicher in GB (required)
     * @param  int $ip_addresses Anzahl der IPv4-Adressen (required)
     * @param  int $ip6_addresses Anzahl der IPv6 Adressen (required)
     * @param  int $backups Anzahl der Backup-Slots (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverUpgradeRequest($server_id, $cores, $memory, $disk, $ip_addresses, $ip6_addresses, $backups)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverUpgrade'
            );
        }
        // verify the required parameter 'cores' is set
        if ($cores === null || (is_array($cores) && count($cores) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cores when calling vserverUpgrade'
            );
        }
        // verify the required parameter 'memory' is set
        if ($memory === null || (is_array($memory) && count($memory) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memory when calling vserverUpgrade'
            );
        }
        // verify the required parameter 'disk' is set
        if ($disk === null || (is_array($disk) && count($disk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $disk when calling vserverUpgrade'
            );
        }
        // verify the required parameter 'ip_addresses' is set
        if ($ip_addresses === null || (is_array($ip_addresses) && count($ip_addresses) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ip_addresses when calling vserverUpgrade'
            );
        }
        // verify the required parameter 'ip6_addresses' is set
        if ($ip6_addresses === null || (is_array($ip6_addresses) && count($ip6_addresses) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ip6_addresses when calling vserverUpgrade'
            );
        }
        // verify the required parameter 'backups' is set
        if ($backups === null || (is_array($backups) && count($backups) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $backups when calling vserverUpgrade'
            );
        }

        $resourcePath = '/vserver/upgrade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }
        // query params
        if ($cores !== null) {
            $queryParams['cores'] = ObjectSerializer::toQueryValue($cores, null);
        }
        // query params
        if ($memory !== null) {
            $queryParams['memory'] = ObjectSerializer::toQueryValue($memory, null);
        }
        // query params
        if ($disk !== null) {
            $queryParams['disk'] = ObjectSerializer::toQueryValue($disk, null);
        }
        // query params
        if ($ip_addresses !== null) {
            $queryParams['ip_addresses'] = ObjectSerializer::toQueryValue($ip_addresses, null);
        }
        // query params
        if ($ip6_addresses !== null) {
            $queryParams['ip6_addresses'] = ObjectSerializer::toQueryValue($ip6_addresses, null);
        }
        // query params
        if ($backups !== null) {
            $queryParams['backups'] = ObjectSerializer::toQueryValue($backups, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vserverVnc
     *
     * VNC Konsole abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function vserverVnc($server_id)
    {
        $this->vserverVncWithHttpInfo($server_id);
    }

    /**
     * Operation vserverVncWithHttpInfo
     *
     * VNC Konsole abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \csakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function vserverVncWithHttpInfo($server_id)
    {
        $returnType = '';
        $request = $this->vserverVncRequest($server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation vserverVncAsync
     *
     * VNC Konsole abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverVncAsync($server_id)
    {
        return $this->vserverVncAsyncWithHttpInfo($server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vserverVncAsyncWithHttpInfo
     *
     * VNC Konsole abrufen
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vserverVncAsyncWithHttpInfo($server_id)
    {
        $returnType = '';
        $request = $this->vserverVncRequest($server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vserverVnc'
     *
     * @param  int $server_id Server-ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vserverVncRequest($server_id)
    {
        // verify the required parameter 'server_id' is set
        if ($server_id === null || (is_array($server_id) && count($server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_id when calling vserverVnc'
            );
        }

        $resourcePath = '/vserver/vnc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($server_id !== null) {
            $queryParams['serverId'] = ObjectSerializer::toQueryValue($server_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
