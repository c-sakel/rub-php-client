<?php
/**
 * TeamspeakInstanceApi
 * PHP version 5
 *
 * @category Class
 * @package  c-sakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RESELLING.SERVICES API
 *
 * Auf folgender Seite finden Sie die Beschreibung der RESELLING.SERVICES Schnittstelle  <!--<a href=\"https://reselling.services/api-docs?lang=en\" title=\"Englische Dokumentation\">Dokumentation in Englisch</a>-->
 *
 * OpenAPI spec version: 1.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace c-sakel\RUBClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use c-sakel\RUBClient\ApiException;
use c-sakel\RUBClient\Configuration;
use c-sakel\RUBClient\HeaderSelector;
use c-sakel\RUBClient\ObjectSerializer;

/**
 * TeamspeakInstanceApi Class Doc Comment
 *
 * @category Class
 * @package  c-sakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TeamspeakInstanceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation teamspeakInstanceDdosAlert
     *
     * DDoS Alerts zur Teamspeak Instanz abrufen
     *
     * @param  int $instance Instanz-ID, wofür die DDoS Alerts abgerufen werden sollen (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\DdosAlert[]
     */
    public function teamspeakInstanceDdosAlert($instance)
    {
        list($response) = $this->teamspeakInstanceDdosAlertWithHttpInfo($instance);
        return $response;
    }

    /**
     * Operation teamspeakInstanceDdosAlertWithHttpInfo
     *
     * DDoS Alerts zur Teamspeak Instanz abrufen
     *
     * @param  int $instance Instanz-ID, wofür die DDoS Alerts abgerufen werden sollen (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\DdosAlert[], HTTP status code, HTTP response headers (array of strings)
     */
    public function teamspeakInstanceDdosAlertWithHttpInfo($instance)
    {
        $returnType = '\c-sakel\RUBClient\Model\DdosAlert[]';
        $request = $this->teamspeakInstanceDdosAlertRequest($instance);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\DdosAlert[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamspeakInstanceDdosAlertAsync
     *
     * DDoS Alerts zur Teamspeak Instanz abrufen
     *
     * @param  int $instance Instanz-ID, wofür die DDoS Alerts abgerufen werden sollen (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceDdosAlertAsync($instance)
    {
        return $this->teamspeakInstanceDdosAlertAsyncWithHttpInfo($instance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamspeakInstanceDdosAlertAsyncWithHttpInfo
     *
     * DDoS Alerts zur Teamspeak Instanz abrufen
     *
     * @param  int $instance Instanz-ID, wofür die DDoS Alerts abgerufen werden sollen (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceDdosAlertAsyncWithHttpInfo($instance)
    {
        $returnType = '\c-sakel\RUBClient\Model\DdosAlert[]';
        $request = $this->teamspeakInstanceDdosAlertRequest($instance);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamspeakInstanceDdosAlert'
     *
     * @param  int $instance Instanz-ID, wofür die DDoS Alerts abgerufen werden sollen (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamspeakInstanceDdosAlertRequest($instance)
    {
        // verify the required parameter 'instance' is set
        if ($instance === null || (is_array($instance) && count($instance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance when calling teamspeakInstanceDdosAlert'
            );
        }

        $resourcePath = '/teamspeak_instance/ddos_alert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($instance !== null) {
            $queryParams['instance'] = ObjectSerializer::toQueryValue($instance, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamspeakInstanceIndex
     *
     * Teamspeak Instanzen abrufen
     *
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\TeamspeakInstance[]
     */
    public function teamspeakInstanceIndex()
    {
        list($response) = $this->teamspeakInstanceIndexWithHttpInfo();
        return $response;
    }

    /**
     * Operation teamspeakInstanceIndexWithHttpInfo
     *
     * Teamspeak Instanzen abrufen
     *
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\TeamspeakInstance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function teamspeakInstanceIndexWithHttpInfo()
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceIndexRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\TeamspeakInstance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamspeakInstanceIndexAsync
     *
     * Teamspeak Instanzen abrufen
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceIndexAsync()
    {
        return $this->teamspeakInstanceIndexAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamspeakInstanceIndexAsyncWithHttpInfo
     *
     * Teamspeak Instanzen abrufen
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceIndexAsyncWithHttpInfo()
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceIndexRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamspeakInstanceIndex'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamspeakInstanceIndexRequest()
    {

        $resourcePath = '/teamspeak_instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamspeakInstanceResetQueryPassword
     *
     * Query Passwort von Teamspeak Instanz zurücksetzen
     *
     * @param  int $instance Instanz-ID, wofür das Query Passwort zurückgesetzt werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\TeamspeakInstance[]
     */
    public function teamspeakInstanceResetQueryPassword($instance)
    {
        list($response) = $this->teamspeakInstanceResetQueryPasswordWithHttpInfo($instance);
        return $response;
    }

    /**
     * Operation teamspeakInstanceResetQueryPasswordWithHttpInfo
     *
     * Query Passwort von Teamspeak Instanz zurücksetzen
     *
     * @param  int $instance Instanz-ID, wofür das Query Passwort zurückgesetzt werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\TeamspeakInstance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function teamspeakInstanceResetQueryPasswordWithHttpInfo($instance)
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceResetQueryPasswordRequest($instance);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\TeamspeakInstance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamspeakInstanceResetQueryPasswordAsync
     *
     * Query Passwort von Teamspeak Instanz zurücksetzen
     *
     * @param  int $instance Instanz-ID, wofür das Query Passwort zurückgesetzt werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceResetQueryPasswordAsync($instance)
    {
        return $this->teamspeakInstanceResetQueryPasswordAsyncWithHttpInfo($instance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamspeakInstanceResetQueryPasswordAsyncWithHttpInfo
     *
     * Query Passwort von Teamspeak Instanz zurücksetzen
     *
     * @param  int $instance Instanz-ID, wofür das Query Passwort zurückgesetzt werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceResetQueryPasswordAsyncWithHttpInfo($instance)
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceResetQueryPasswordRequest($instance);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamspeakInstanceResetQueryPassword'
     *
     * @param  int $instance Instanz-ID, wofür das Query Passwort zurückgesetzt werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamspeakInstanceResetQueryPasswordRequest($instance)
    {
        // verify the required parameter 'instance' is set
        if ($instance === null || (is_array($instance) && count($instance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance when calling teamspeakInstanceResetQueryPassword'
            );
        }

        $resourcePath = '/teamspeak_instance/reset_query_password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($instance !== null) {
            $queryParams['instance'] = ObjectSerializer::toQueryValue($instance, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamspeakInstanceRestart
     *
     * Teamspeak Instanzen neustarten
     *
     * @param  int $instance Instanz-ID, welche neugestartet werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\TeamspeakInstance[]
     */
    public function teamspeakInstanceRestart($instance)
    {
        list($response) = $this->teamspeakInstanceRestartWithHttpInfo($instance);
        return $response;
    }

    /**
     * Operation teamspeakInstanceRestartWithHttpInfo
     *
     * Teamspeak Instanzen neustarten
     *
     * @param  int $instance Instanz-ID, welche neugestartet werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\TeamspeakInstance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function teamspeakInstanceRestartWithHttpInfo($instance)
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceRestartRequest($instance);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\TeamspeakInstance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamspeakInstanceRestartAsync
     *
     * Teamspeak Instanzen neustarten
     *
     * @param  int $instance Instanz-ID, welche neugestartet werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceRestartAsync($instance)
    {
        return $this->teamspeakInstanceRestartAsyncWithHttpInfo($instance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamspeakInstanceRestartAsyncWithHttpInfo
     *
     * Teamspeak Instanzen neustarten
     *
     * @param  int $instance Instanz-ID, welche neugestartet werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceRestartAsyncWithHttpInfo($instance)
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceRestartRequest($instance);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamspeakInstanceRestart'
     *
     * @param  int $instance Instanz-ID, welche neugestartet werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamspeakInstanceRestartRequest($instance)
    {
        // verify the required parameter 'instance' is set
        if ($instance === null || (is_array($instance) && count($instance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance when calling teamspeakInstanceRestart'
            );
        }

        $resourcePath = '/teamspeak_instance/restart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($instance !== null) {
            $queryParams['instance'] = ObjectSerializer::toQueryValue($instance, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamspeakInstanceSettings
     *
     * Einstellungen von Teamspeak Instanz speichern
     *
     * @param  int $instance Instanz-ID, wofür die Einstellungen speichert werden sollen (required)
     * @param  string $title Titel der Teamspeak Instanz (optional)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\TeamspeakInstance[]
     */
    public function teamspeakInstanceSettings($instance, $title = null)
    {
        list($response) = $this->teamspeakInstanceSettingsWithHttpInfo($instance, $title);
        return $response;
    }

    /**
     * Operation teamspeakInstanceSettingsWithHttpInfo
     *
     * Einstellungen von Teamspeak Instanz speichern
     *
     * @param  int $instance Instanz-ID, wofür die Einstellungen speichert werden sollen (required)
     * @param  string $title Titel der Teamspeak Instanz (optional)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\TeamspeakInstance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function teamspeakInstanceSettingsWithHttpInfo($instance, $title = null)
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceSettingsRequest($instance, $title);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\TeamspeakInstance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamspeakInstanceSettingsAsync
     *
     * Einstellungen von Teamspeak Instanz speichern
     *
     * @param  int $instance Instanz-ID, wofür die Einstellungen speichert werden sollen (required)
     * @param  string $title Titel der Teamspeak Instanz (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceSettingsAsync($instance, $title = null)
    {
        return $this->teamspeakInstanceSettingsAsyncWithHttpInfo($instance, $title)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamspeakInstanceSettingsAsyncWithHttpInfo
     *
     * Einstellungen von Teamspeak Instanz speichern
     *
     * @param  int $instance Instanz-ID, wofür die Einstellungen speichert werden sollen (required)
     * @param  string $title Titel der Teamspeak Instanz (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceSettingsAsyncWithHttpInfo($instance, $title = null)
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceSettingsRequest($instance, $title);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamspeakInstanceSettings'
     *
     * @param  int $instance Instanz-ID, wofür die Einstellungen speichert werden sollen (required)
     * @param  string $title Titel der Teamspeak Instanz (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamspeakInstanceSettingsRequest($instance, $title = null)
    {
        // verify the required parameter 'instance' is set
        if ($instance === null || (is_array($instance) && count($instance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance when calling teamspeakInstanceSettings'
            );
        }

        $resourcePath = '/teamspeak_instance/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($instance !== null) {
            $queryParams['instance'] = ObjectSerializer::toQueryValue($instance, null);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamspeakInstanceShow
     *
     * Einzelne Teamspeak Instanz abrufen
     *
     * @param  int $instance Instanz-ID, welche abgerufen werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\TeamspeakInstance[]
     */
    public function teamspeakInstanceShow($instance)
    {
        list($response) = $this->teamspeakInstanceShowWithHttpInfo($instance);
        return $response;
    }

    /**
     * Operation teamspeakInstanceShowWithHttpInfo
     *
     * Einzelne Teamspeak Instanz abrufen
     *
     * @param  int $instance Instanz-ID, welche abgerufen werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\TeamspeakInstance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function teamspeakInstanceShowWithHttpInfo($instance)
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceShowRequest($instance);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\TeamspeakInstance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamspeakInstanceShowAsync
     *
     * Einzelne Teamspeak Instanz abrufen
     *
     * @param  int $instance Instanz-ID, welche abgerufen werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceShowAsync($instance)
    {
        return $this->teamspeakInstanceShowAsyncWithHttpInfo($instance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamspeakInstanceShowAsyncWithHttpInfo
     *
     * Einzelne Teamspeak Instanz abrufen
     *
     * @param  int $instance Instanz-ID, welche abgerufen werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceShowAsyncWithHttpInfo($instance)
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceShowRequest($instance);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamspeakInstanceShow'
     *
     * @param  int $instance Instanz-ID, welche abgerufen werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamspeakInstanceShowRequest($instance)
    {
        // verify the required parameter 'instance' is set
        if ($instance === null || (is_array($instance) && count($instance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance when calling teamspeakInstanceShow'
            );
        }

        $resourcePath = '/teamspeak_instance/show';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($instance !== null) {
            $queryParams['instance'] = ObjectSerializer::toQueryValue($instance, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamspeakInstanceStart
     *
     * Teamspeak Instanzen starten
     *
     * @param  int $instance Instanz-ID, welche gestartet werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\TeamspeakInstance[]
     */
    public function teamspeakInstanceStart($instance)
    {
        list($response) = $this->teamspeakInstanceStartWithHttpInfo($instance);
        return $response;
    }

    /**
     * Operation teamspeakInstanceStartWithHttpInfo
     *
     * Teamspeak Instanzen starten
     *
     * @param  int $instance Instanz-ID, welche gestartet werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\TeamspeakInstance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function teamspeakInstanceStartWithHttpInfo($instance)
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceStartRequest($instance);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\TeamspeakInstance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamspeakInstanceStartAsync
     *
     * Teamspeak Instanzen starten
     *
     * @param  int $instance Instanz-ID, welche gestartet werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceStartAsync($instance)
    {
        return $this->teamspeakInstanceStartAsyncWithHttpInfo($instance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamspeakInstanceStartAsyncWithHttpInfo
     *
     * Teamspeak Instanzen starten
     *
     * @param  int $instance Instanz-ID, welche gestartet werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceStartAsyncWithHttpInfo($instance)
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceStartRequest($instance);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamspeakInstanceStart'
     *
     * @param  int $instance Instanz-ID, welche gestartet werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamspeakInstanceStartRequest($instance)
    {
        // verify the required parameter 'instance' is set
        if ($instance === null || (is_array($instance) && count($instance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance when calling teamspeakInstanceStart'
            );
        }

        $resourcePath = '/teamspeak_instance/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($instance !== null) {
            $queryParams['instance'] = ObjectSerializer::toQueryValue($instance, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamspeakInstanceStop
     *
     * Teamspeak Instanzen stoppen
     *
     * @param  int $instance Instanz-ID, welche gestoppt werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \c-sakel\RUBClient\Model\TeamspeakInstance[]
     */
    public function teamspeakInstanceStop($instance)
    {
        list($response) = $this->teamspeakInstanceStopWithHttpInfo($instance);
        return $response;
    }

    /**
     * Operation teamspeakInstanceStopWithHttpInfo
     *
     * Teamspeak Instanzen stoppen
     *
     * @param  int $instance Instanz-ID, welche gestoppt werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \c-sakel\RUBClient\Model\TeamspeakInstance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function teamspeakInstanceStopWithHttpInfo($instance)
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceStopRequest($instance);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\c-sakel\RUBClient\Model\TeamspeakInstance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamspeakInstanceStopAsync
     *
     * Teamspeak Instanzen stoppen
     *
     * @param  int $instance Instanz-ID, welche gestoppt werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceStopAsync($instance)
    {
        return $this->teamspeakInstanceStopAsyncWithHttpInfo($instance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamspeakInstanceStopAsyncWithHttpInfo
     *
     * Teamspeak Instanzen stoppen
     *
     * @param  int $instance Instanz-ID, welche gestoppt werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceStopAsyncWithHttpInfo($instance)
    {
        $returnType = '\c-sakel\RUBClient\Model\TeamspeakInstance[]';
        $request = $this->teamspeakInstanceStopRequest($instance);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamspeakInstanceStop'
     *
     * @param  int $instance Instanz-ID, welche gestoppt werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamspeakInstanceStopRequest($instance)
    {
        // verify the required parameter 'instance' is set
        if ($instance === null || (is_array($instance) && count($instance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance when calling teamspeakInstanceStop'
            );
        }

        $resourcePath = '/teamspeak_instance/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($instance !== null) {
            $queryParams['instance'] = ObjectSerializer::toQueryValue($instance, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamspeakInstanceWhitelistAdd
     *
     * Teamspeak Instanz Whitelist Adresse hinzufügen
     *
     * @param  string $instance Teamspeak-Instanz (required)
     * @param  string $address IP-Adresse, welche in die Whitelist hinzugefügt werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function teamspeakInstanceWhitelistAdd($instance, $address)
    {
        $this->teamspeakInstanceWhitelistAddWithHttpInfo($instance, $address);
    }

    /**
     * Operation teamspeakInstanceWhitelistAddWithHttpInfo
     *
     * Teamspeak Instanz Whitelist Adresse hinzufügen
     *
     * @param  string $instance Teamspeak-Instanz (required)
     * @param  string $address IP-Adresse, welche in die Whitelist hinzugefügt werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamspeakInstanceWhitelistAddWithHttpInfo($instance, $address)
    {
        $returnType = '';
        $request = $this->teamspeakInstanceWhitelistAddRequest($instance, $address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation teamspeakInstanceWhitelistAddAsync
     *
     * Teamspeak Instanz Whitelist Adresse hinzufügen
     *
     * @param  string $instance Teamspeak-Instanz (required)
     * @param  string $address IP-Adresse, welche in die Whitelist hinzugefügt werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceWhitelistAddAsync($instance, $address)
    {
        return $this->teamspeakInstanceWhitelistAddAsyncWithHttpInfo($instance, $address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamspeakInstanceWhitelistAddAsyncWithHttpInfo
     *
     * Teamspeak Instanz Whitelist Adresse hinzufügen
     *
     * @param  string $instance Teamspeak-Instanz (required)
     * @param  string $address IP-Adresse, welche in die Whitelist hinzugefügt werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceWhitelistAddAsyncWithHttpInfo($instance, $address)
    {
        $returnType = '';
        $request = $this->teamspeakInstanceWhitelistAddRequest($instance, $address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamspeakInstanceWhitelistAdd'
     *
     * @param  string $instance Teamspeak-Instanz (required)
     * @param  string $address IP-Adresse, welche in die Whitelist hinzugefügt werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamspeakInstanceWhitelistAddRequest($instance, $address)
    {
        // verify the required parameter 'instance' is set
        if ($instance === null || (is_array($instance) && count($instance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance when calling teamspeakInstanceWhitelistAdd'
            );
        }
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling teamspeakInstanceWhitelistAdd'
            );
        }

        $resourcePath = '/teamspeak_instance/whitelist/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($instance !== null) {
            $queryParams['instance'] = ObjectSerializer::toQueryValue($instance, null);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamspeakInstanceWhitelistIndex
     *
     * Teamspeak Instanz Whitelist Adressen abrufen
     *
     * @param  string $instance Teamspeak-Instanz (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function teamspeakInstanceWhitelistIndex($instance)
    {
        $this->teamspeakInstanceWhitelistIndexWithHttpInfo($instance);
    }

    /**
     * Operation teamspeakInstanceWhitelistIndexWithHttpInfo
     *
     * Teamspeak Instanz Whitelist Adressen abrufen
     *
     * @param  string $instance Teamspeak-Instanz (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamspeakInstanceWhitelistIndexWithHttpInfo($instance)
    {
        $returnType = '';
        $request = $this->teamspeakInstanceWhitelistIndexRequest($instance);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation teamspeakInstanceWhitelistIndexAsync
     *
     * Teamspeak Instanz Whitelist Adressen abrufen
     *
     * @param  string $instance Teamspeak-Instanz (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceWhitelistIndexAsync($instance)
    {
        return $this->teamspeakInstanceWhitelistIndexAsyncWithHttpInfo($instance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamspeakInstanceWhitelistIndexAsyncWithHttpInfo
     *
     * Teamspeak Instanz Whitelist Adressen abrufen
     *
     * @param  string $instance Teamspeak-Instanz (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceWhitelistIndexAsyncWithHttpInfo($instance)
    {
        $returnType = '';
        $request = $this->teamspeakInstanceWhitelistIndexRequest($instance);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamspeakInstanceWhitelistIndex'
     *
     * @param  string $instance Teamspeak-Instanz (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamspeakInstanceWhitelistIndexRequest($instance)
    {
        // verify the required parameter 'instance' is set
        if ($instance === null || (is_array($instance) && count($instance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance when calling teamspeakInstanceWhitelistIndex'
            );
        }

        $resourcePath = '/teamspeak_instance/whitelist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($instance !== null) {
            $queryParams['instance'] = ObjectSerializer::toQueryValue($instance, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamspeakInstanceWhitelistRemove
     *
     * Teamspeak Instanz Whitelist Adresse entfernen
     *
     * @param  string $instance Teamspeak-Instanz (required)
     * @param  string $address IP-Adresse, welche aus der Whitelist entfernt werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function teamspeakInstanceWhitelistRemove($instance, $address)
    {
        $this->teamspeakInstanceWhitelistRemoveWithHttpInfo($instance, $address);
    }

    /**
     * Operation teamspeakInstanceWhitelistRemoveWithHttpInfo
     *
     * Teamspeak Instanz Whitelist Adresse entfernen
     *
     * @param  string $instance Teamspeak-Instanz (required)
     * @param  string $address IP-Adresse, welche aus der Whitelist entfernt werden soll (required)
     *
     * @throws \c-sakel\RUBClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamspeakInstanceWhitelistRemoveWithHttpInfo($instance, $address)
    {
        $returnType = '';
        $request = $this->teamspeakInstanceWhitelistRemoveRequest($instance, $address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation teamspeakInstanceWhitelistRemoveAsync
     *
     * Teamspeak Instanz Whitelist Adresse entfernen
     *
     * @param  string $instance Teamspeak-Instanz (required)
     * @param  string $address IP-Adresse, welche aus der Whitelist entfernt werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceWhitelistRemoveAsync($instance, $address)
    {
        return $this->teamspeakInstanceWhitelistRemoveAsyncWithHttpInfo($instance, $address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamspeakInstanceWhitelistRemoveAsyncWithHttpInfo
     *
     * Teamspeak Instanz Whitelist Adresse entfernen
     *
     * @param  string $instance Teamspeak-Instanz (required)
     * @param  string $address IP-Adresse, welche aus der Whitelist entfernt werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamspeakInstanceWhitelistRemoveAsyncWithHttpInfo($instance, $address)
    {
        $returnType = '';
        $request = $this->teamspeakInstanceWhitelistRemoveRequest($instance, $address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamspeakInstanceWhitelistRemove'
     *
     * @param  string $instance Teamspeak-Instanz (required)
     * @param  string $address IP-Adresse, welche aus der Whitelist entfernt werden soll (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamspeakInstanceWhitelistRemoveRequest($instance, $address)
    {
        // verify the required parameter 'instance' is set
        if ($instance === null || (is_array($instance) && count($instance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instance when calling teamspeakInstanceWhitelistRemove'
            );
        }
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling teamspeakInstanceWhitelistRemove'
            );
        }

        $resourcePath = '/teamspeak_instance/whitelist/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($instance !== null) {
            $queryParams['instance'] = ObjectSerializer::toQueryValue($instance, null);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
