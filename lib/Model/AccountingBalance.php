<?php
/**
 * AccountingBalance
 *
 * PHP version 5
 *
 * @category Class
 * @package  csakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RESELLING.SERVICES API
 *
 * Auf folgender Seite finden Sie die Beschreibung der RESELLING.SERVICES Schnittstelle  <!--<a href=\"https://reselling.services/api-docs?lang=en\" title=\"Englische Dokumentation\">Dokumentation in Englisch</a>-->
 *
 * OpenAPI spec version: 1.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace csakel\RUBClient\Model;

use \ArrayAccess;
use \csakel\RUBClient\ObjectSerializer;

/**
 * AccountingBalance Class Doc Comment
 *
 * @category Class
 * @package  csakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountingBalance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountingBalance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'balance' => 'string',
        'credit_limit' => 'string',
        'reserved_amount' => 'string',
        'available_amount' => 'string',
        'next_invoice_generation' => '\DateTime',
        'reserved_positions' => '\csakel\RUBClient\Model\AccountingBalanceReservedPositions[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'balance' => null,
        'credit_limit' => null,
        'reserved_amount' => null,
        'available_amount' => null,
        'next_invoice_generation' => 'date',
        'reserved_positions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'balance' => 'balance',
        'credit_limit' => 'creditLimit',
        'reserved_amount' => 'reservedAmount',
        'available_amount' => 'availableAmount',
        'next_invoice_generation' => 'nextInvoiceGeneration',
        'reserved_positions' => 'reservedPositions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'balance' => 'setBalance',
        'credit_limit' => 'setCreditLimit',
        'reserved_amount' => 'setReservedAmount',
        'available_amount' => 'setAvailableAmount',
        'next_invoice_generation' => 'setNextInvoiceGeneration',
        'reserved_positions' => 'setReservedPositions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'balance' => 'getBalance',
        'credit_limit' => 'getCreditLimit',
        'reserved_amount' => 'getReservedAmount',
        'available_amount' => 'getAvailableAmount',
        'next_invoice_generation' => 'getNextInvoiceGeneration',
        'reserved_positions' => 'getReservedPositions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['reserved_amount'] = isset($data['reserved_amount']) ? $data['reserved_amount'] : null;
        $this->container['available_amount'] = isset($data['available_amount']) ? $data['available_amount'] : null;
        $this->container['next_invoice_generation'] = isset($data['next_invoice_generation']) ? $data['next_invoice_generation'] : null;
        $this->container['reserved_positions'] = isset($data['reserved_positions']) ? $data['reserved_positions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets balance
     *
     * @return string
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param string $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return string
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param string $credit_limit credit_limit
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets reserved_amount
     *
     * @return string
     */
    public function getReservedAmount()
    {
        return $this->container['reserved_amount'];
    }

    /**
     * Sets reserved_amount
     *
     * @param string $reserved_amount reserved_amount
     *
     * @return $this
     */
    public function setReservedAmount($reserved_amount)
    {
        $this->container['reserved_amount'] = $reserved_amount;

        return $this;
    }

    /**
     * Gets available_amount
     *
     * @return string
     */
    public function getAvailableAmount()
    {
        return $this->container['available_amount'];
    }

    /**
     * Sets available_amount
     *
     * @param string $available_amount available_amount
     *
     * @return $this
     */
    public function setAvailableAmount($available_amount)
    {
        $this->container['available_amount'] = $available_amount;

        return $this;
    }

    /**
     * Gets next_invoice_generation
     *
     * @return \DateTime
     */
    public function getNextInvoiceGeneration()
    {
        return $this->container['next_invoice_generation'];
    }

    /**
     * Sets next_invoice_generation
     *
     * @param \DateTime $next_invoice_generation next_invoice_generation
     *
     * @return $this
     */
    public function setNextInvoiceGeneration($next_invoice_generation)
    {
        $this->container['next_invoice_generation'] = $next_invoice_generation;

        return $this;
    }

    /**
     * Gets reserved_positions
     *
     * @return \csakel\RUBClient\Model\AccountingBalanceReservedPositions[]
     */
    public function getReservedPositions()
    {
        return $this->container['reserved_positions'];
    }

    /**
     * Sets reserved_positions
     *
     * @param \csakel\RUBClient\Model\AccountingBalanceReservedPositions[] $reserved_positions reserved_positions
     *
     * @return $this
     */
    public function setReservedPositions($reserved_positions)
    {
        $this->container['reserved_positions'] = $reserved_positions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
