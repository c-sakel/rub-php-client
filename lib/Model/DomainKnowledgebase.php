<?php
/**
 * DomainKnowledgebase
 *
 * PHP version 5
 *
 * @category Class
 * @package  c-sakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RESELLING.SERVICES API
 *
 * Auf folgender Seite finden Sie die Beschreibung der RESELLING.SERVICES Schnittstelle  <!--<a href=\"https://reselling.services/api-docs?lang=en\" title=\"Englische Dokumentation\">Dokumentation in Englisch</a>-->
 *
 * OpenAPI spec version: 1.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace c-sakel\RUBClient\Model;

use \ArrayAccess;
use \c-sakel\RUBClient\ObjectSerializer;

/**
 * DomainKnowledgebase Class Doc Comment
 *
 * @category Class
 * @package  c-sakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainKnowledgebase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainKnowledgebase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tld' => 'string',
        'tld_type' => 'string',
        'tld_continent_de' => 'string',
        'min_characters' => 'int',
        'max_characters' => 'int',
        'authinfo' => 'bool',
        'numeral_domains' => 'bool',
        'premium_domains' => 'bool',
        'idn' => 'bool',
        'dns_check' => 'bool',
        'privacy' => 'bool',
        'trustee' => 'bool',
        'dnssec' => 'bool',
        'handle_extensions' => 'bool',
        'transfer_confirmation' => 'bool',
        'rgp_period_de' => 'string',
        'cancelation_period_de' => 'string',
        'registry_status' => 'string[]',
        'whois_server' => 'string',
        'country_iso' => 'string',
        'country_name_de' => 'string',
        'restrictions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tld' => null,
        'tld_type' => null,
        'tld_continent_de' => null,
        'min_characters' => null,
        'max_characters' => null,
        'authinfo' => null,
        'numeral_domains' => null,
        'premium_domains' => null,
        'idn' => null,
        'dns_check' => null,
        'privacy' => null,
        'trustee' => null,
        'dnssec' => null,
        'handle_extensions' => null,
        'transfer_confirmation' => null,
        'rgp_period_de' => null,
        'cancelation_period_de' => null,
        'registry_status' => null,
        'whois_server' => null,
        'country_iso' => null,
        'country_name_de' => null,
        'restrictions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tld' => 'tld',
        'tld_type' => 'tld_type',
        'tld_continent_de' => 'tld_continent_de',
        'min_characters' => 'min_characters',
        'max_characters' => 'max_characters',
        'authinfo' => 'authinfo',
        'numeral_domains' => 'numeral_domains',
        'premium_domains' => 'premium_domains',
        'idn' => 'idn',
        'dns_check' => 'dns_check',
        'privacy' => 'privacy',
        'trustee' => 'trustee',
        'dnssec' => 'dnssec',
        'handle_extensions' => 'handle_extensions',
        'transfer_confirmation' => 'transfer_confirmation',
        'rgp_period_de' => 'rgp_period_de',
        'cancelation_period_de' => 'cancelation_period_de',
        'registry_status' => 'registry_status',
        'whois_server' => 'whois_server',
        'country_iso' => 'country_iso',
        'country_name_de' => 'country_name_de',
        'restrictions' => 'restrictions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tld' => 'setTld',
        'tld_type' => 'setTldType',
        'tld_continent_de' => 'setTldContinentDe',
        'min_characters' => 'setMinCharacters',
        'max_characters' => 'setMaxCharacters',
        'authinfo' => 'setAuthinfo',
        'numeral_domains' => 'setNumeralDomains',
        'premium_domains' => 'setPremiumDomains',
        'idn' => 'setIdn',
        'dns_check' => 'setDnsCheck',
        'privacy' => 'setPrivacy',
        'trustee' => 'setTrustee',
        'dnssec' => 'setDnssec',
        'handle_extensions' => 'setHandleExtensions',
        'transfer_confirmation' => 'setTransferConfirmation',
        'rgp_period_de' => 'setRgpPeriodDe',
        'cancelation_period_de' => 'setCancelationPeriodDe',
        'registry_status' => 'setRegistryStatus',
        'whois_server' => 'setWhoisServer',
        'country_iso' => 'setCountryIso',
        'country_name_de' => 'setCountryNameDe',
        'restrictions' => 'setRestrictions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tld' => 'getTld',
        'tld_type' => 'getTldType',
        'tld_continent_de' => 'getTldContinentDe',
        'min_characters' => 'getMinCharacters',
        'max_characters' => 'getMaxCharacters',
        'authinfo' => 'getAuthinfo',
        'numeral_domains' => 'getNumeralDomains',
        'premium_domains' => 'getPremiumDomains',
        'idn' => 'getIdn',
        'dns_check' => 'getDnsCheck',
        'privacy' => 'getPrivacy',
        'trustee' => 'getTrustee',
        'dnssec' => 'getDnssec',
        'handle_extensions' => 'getHandleExtensions',
        'transfer_confirmation' => 'getTransferConfirmation',
        'rgp_period_de' => 'getRgpPeriodDe',
        'cancelation_period_de' => 'getCancelationPeriodDe',
        'registry_status' => 'getRegistryStatus',
        'whois_server' => 'getWhoisServer',
        'country_iso' => 'getCountryIso',
        'country_name_de' => 'getCountryNameDe',
        'restrictions' => 'getRestrictions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tld'] = isset($data['tld']) ? $data['tld'] : null;
        $this->container['tld_type'] = isset($data['tld_type']) ? $data['tld_type'] : null;
        $this->container['tld_continent_de'] = isset($data['tld_continent_de']) ? $data['tld_continent_de'] : null;
        $this->container['min_characters'] = isset($data['min_characters']) ? $data['min_characters'] : null;
        $this->container['max_characters'] = isset($data['max_characters']) ? $data['max_characters'] : null;
        $this->container['authinfo'] = isset($data['authinfo']) ? $data['authinfo'] : null;
        $this->container['numeral_domains'] = isset($data['numeral_domains']) ? $data['numeral_domains'] : null;
        $this->container['premium_domains'] = isset($data['premium_domains']) ? $data['premium_domains'] : null;
        $this->container['idn'] = isset($data['idn']) ? $data['idn'] : null;
        $this->container['dns_check'] = isset($data['dns_check']) ? $data['dns_check'] : null;
        $this->container['privacy'] = isset($data['privacy']) ? $data['privacy'] : null;
        $this->container['trustee'] = isset($data['trustee']) ? $data['trustee'] : null;
        $this->container['dnssec'] = isset($data['dnssec']) ? $data['dnssec'] : null;
        $this->container['handle_extensions'] = isset($data['handle_extensions']) ? $data['handle_extensions'] : null;
        $this->container['transfer_confirmation'] = isset($data['transfer_confirmation']) ? $data['transfer_confirmation'] : null;
        $this->container['rgp_period_de'] = isset($data['rgp_period_de']) ? $data['rgp_period_de'] : null;
        $this->container['cancelation_period_de'] = isset($data['cancelation_period_de']) ? $data['cancelation_period_de'] : null;
        $this->container['registry_status'] = isset($data['registry_status']) ? $data['registry_status'] : null;
        $this->container['whois_server'] = isset($data['whois_server']) ? $data['whois_server'] : null;
        $this->container['country_iso'] = isset($data['country_iso']) ? $data['country_iso'] : null;
        $this->container['country_name_de'] = isset($data['country_name_de']) ? $data['country_name_de'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tld
     *
     * @return string
     */
    public function getTld()
    {
        return $this->container['tld'];
    }

    /**
     * Sets tld
     *
     * @param string $tld tld
     *
     * @return $this
     */
    public function setTld($tld)
    {
        $this->container['tld'] = $tld;

        return $this;
    }

    /**
     * Gets tld_type
     *
     * @return string
     */
    public function getTldType()
    {
        return $this->container['tld_type'];
    }

    /**
     * Sets tld_type
     *
     * @param string $tld_type tld_type
     *
     * @return $this
     */
    public function setTldType($tld_type)
    {
        $this->container['tld_type'] = $tld_type;

        return $this;
    }

    /**
     * Gets tld_continent_de
     *
     * @return string
     */
    public function getTldContinentDe()
    {
        return $this->container['tld_continent_de'];
    }

    /**
     * Sets tld_continent_de
     *
     * @param string $tld_continent_de tld_continent_de
     *
     * @return $this
     */
    public function setTldContinentDe($tld_continent_de)
    {
        $this->container['tld_continent_de'] = $tld_continent_de;

        return $this;
    }

    /**
     * Gets min_characters
     *
     * @return int
     */
    public function getMinCharacters()
    {
        return $this->container['min_characters'];
    }

    /**
     * Sets min_characters
     *
     * @param int $min_characters min_characters
     *
     * @return $this
     */
    public function setMinCharacters($min_characters)
    {
        $this->container['min_characters'] = $min_characters;

        return $this;
    }

    /**
     * Gets max_characters
     *
     * @return int
     */
    public function getMaxCharacters()
    {
        return $this->container['max_characters'];
    }

    /**
     * Sets max_characters
     *
     * @param int $max_characters max_characters
     *
     * @return $this
     */
    public function setMaxCharacters($max_characters)
    {
        $this->container['max_characters'] = $max_characters;

        return $this;
    }

    /**
     * Gets authinfo
     *
     * @return bool
     */
    public function getAuthinfo()
    {
        return $this->container['authinfo'];
    }

    /**
     * Sets authinfo
     *
     * @param bool $authinfo authinfo
     *
     * @return $this
     */
    public function setAuthinfo($authinfo)
    {
        $this->container['authinfo'] = $authinfo;

        return $this;
    }

    /**
     * Gets numeral_domains
     *
     * @return bool
     */
    public function getNumeralDomains()
    {
        return $this->container['numeral_domains'];
    }

    /**
     * Sets numeral_domains
     *
     * @param bool $numeral_domains numeral_domains
     *
     * @return $this
     */
    public function setNumeralDomains($numeral_domains)
    {
        $this->container['numeral_domains'] = $numeral_domains;

        return $this;
    }

    /**
     * Gets premium_domains
     *
     * @return bool
     */
    public function getPremiumDomains()
    {
        return $this->container['premium_domains'];
    }

    /**
     * Sets premium_domains
     *
     * @param bool $premium_domains premium_domains
     *
     * @return $this
     */
    public function setPremiumDomains($premium_domains)
    {
        $this->container['premium_domains'] = $premium_domains;

        return $this;
    }

    /**
     * Gets idn
     *
     * @return bool
     */
    public function getIdn()
    {
        return $this->container['idn'];
    }

    /**
     * Sets idn
     *
     * @param bool $idn idn
     *
     * @return $this
     */
    public function setIdn($idn)
    {
        $this->container['idn'] = $idn;

        return $this;
    }

    /**
     * Gets dns_check
     *
     * @return bool
     */
    public function getDnsCheck()
    {
        return $this->container['dns_check'];
    }

    /**
     * Sets dns_check
     *
     * @param bool $dns_check dns_check
     *
     * @return $this
     */
    public function setDnsCheck($dns_check)
    {
        $this->container['dns_check'] = $dns_check;

        return $this;
    }

    /**
     * Gets privacy
     *
     * @return bool
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     *
     * @param bool $privacy privacy
     *
     * @return $this
     */
    public function setPrivacy($privacy)
    {
        $this->container['privacy'] = $privacy;

        return $this;
    }

    /**
     * Gets trustee
     *
     * @return bool
     */
    public function getTrustee()
    {
        return $this->container['trustee'];
    }

    /**
     * Sets trustee
     *
     * @param bool $trustee trustee
     *
     * @return $this
     */
    public function setTrustee($trustee)
    {
        $this->container['trustee'] = $trustee;

        return $this;
    }

    /**
     * Gets dnssec
     *
     * @return bool
     */
    public function getDnssec()
    {
        return $this->container['dnssec'];
    }

    /**
     * Sets dnssec
     *
     * @param bool $dnssec dnssec
     *
     * @return $this
     */
    public function setDnssec($dnssec)
    {
        $this->container['dnssec'] = $dnssec;

        return $this;
    }

    /**
     * Gets handle_extensions
     *
     * @return bool
     */
    public function getHandleExtensions()
    {
        return $this->container['handle_extensions'];
    }

    /**
     * Sets handle_extensions
     *
     * @param bool $handle_extensions handle_extensions
     *
     * @return $this
     */
    public function setHandleExtensions($handle_extensions)
    {
        $this->container['handle_extensions'] = $handle_extensions;

        return $this;
    }

    /**
     * Gets transfer_confirmation
     *
     * @return bool
     */
    public function getTransferConfirmation()
    {
        return $this->container['transfer_confirmation'];
    }

    /**
     * Sets transfer_confirmation
     *
     * @param bool $transfer_confirmation transfer_confirmation
     *
     * @return $this
     */
    public function setTransferConfirmation($transfer_confirmation)
    {
        $this->container['transfer_confirmation'] = $transfer_confirmation;

        return $this;
    }

    /**
     * Gets rgp_period_de
     *
     * @return string
     */
    public function getRgpPeriodDe()
    {
        return $this->container['rgp_period_de'];
    }

    /**
     * Sets rgp_period_de
     *
     * @param string $rgp_period_de rgp_period_de
     *
     * @return $this
     */
    public function setRgpPeriodDe($rgp_period_de)
    {
        $this->container['rgp_period_de'] = $rgp_period_de;

        return $this;
    }

    /**
     * Gets cancelation_period_de
     *
     * @return string
     */
    public function getCancelationPeriodDe()
    {
        return $this->container['cancelation_period_de'];
    }

    /**
     * Sets cancelation_period_de
     *
     * @param string $cancelation_period_de cancelation_period_de
     *
     * @return $this
     */
    public function setCancelationPeriodDe($cancelation_period_de)
    {
        $this->container['cancelation_period_de'] = $cancelation_period_de;

        return $this;
    }

    /**
     * Gets registry_status
     *
     * @return string[]
     */
    public function getRegistryStatus()
    {
        return $this->container['registry_status'];
    }

    /**
     * Sets registry_status
     *
     * @param string[] $registry_status Array mit möglichen Werten für den Registry Status
     *
     * @return $this
     */
    public function setRegistryStatus($registry_status)
    {
        $this->container['registry_status'] = $registry_status;

        return $this;
    }

    /**
     * Gets whois_server
     *
     * @return string
     */
    public function getWhoisServer()
    {
        return $this->container['whois_server'];
    }

    /**
     * Sets whois_server
     *
     * @param string $whois_server whois_server
     *
     * @return $this
     */
    public function setWhoisServer($whois_server)
    {
        $this->container['whois_server'] = $whois_server;

        return $this;
    }

    /**
     * Gets country_iso
     *
     * @return string
     */
    public function getCountryIso()
    {
        return $this->container['country_iso'];
    }

    /**
     * Sets country_iso
     *
     * @param string $country_iso country_iso
     *
     * @return $this
     */
    public function setCountryIso($country_iso)
    {
        $this->container['country_iso'] = $country_iso;

        return $this;
    }

    /**
     * Gets country_name_de
     *
     * @return string
     */
    public function getCountryNameDe()
    {
        return $this->container['country_name_de'];
    }

    /**
     * Sets country_name_de
     *
     * @param string $country_name_de country_name_de
     *
     * @return $this
     */
    public function setCountryNameDe($country_name_de)
    {
        $this->container['country_name_de'] = $country_name_de;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return string[]
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param string[] $restrictions Array mit Hinweisen zur jeweiligen Domainendung
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
