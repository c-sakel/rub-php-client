<?php
/**
 * PxeAction
 *
 * PHP version 5
 *
 * @category Class
 * @package  c-sakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RESELLING.SERVICES API
 *
 * Auf folgender Seite finden Sie die Beschreibung der RESELLING.SERVICES Schnittstelle  <!--<a href=\"https://reselling.services/api-docs?lang=en\" title=\"Englische Dokumentation\">Dokumentation in Englisch</a>-->
 *
 * OpenAPI spec version: 1.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace c-sakel\RUBClient\Model;

use \ArrayAccess;
use \c-sakel\RUBClient\ObjectSerializer;

/**
 * PxeAction Class Doc Comment
 *
 * @category Class
 * @package  c-sakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PxeAction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PxeAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'template_id' => 'int',
        'template_title' => 'string',
        'mac_address' => 'string',
        'hostname' => 'string',
        'state' => 'string',
        'state_percent' => 'int',
        'state_action' => 'string',
        'ip_addresses' => 'string[]',
        'ip6_addresses' => 'string[]',
        'start_at' => '\DateTime',
        'end_at' => '\DateTime',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'template_id' => null,
        'template_title' => null,
        'mac_address' => null,
        'hostname' => null,
        'state' => null,
        'state_percent' => null,
        'state_action' => null,
        'ip_addresses' => null,
        'ip6_addresses' => null,
        'start_at' => 'date',
        'end_at' => 'date',
        'created_at' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'template_id' => 'template_id',
        'template_title' => 'template_title',
        'mac_address' => 'mac_address',
        'hostname' => 'hostname',
        'state' => 'state',
        'state_percent' => 'state_percent',
        'state_action' => 'state_action',
        'ip_addresses' => 'ip_addresses',
        'ip6_addresses' => 'ip6_addresses',
        'start_at' => 'start_at',
        'end_at' => 'end_at',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'template_id' => 'setTemplateId',
        'template_title' => 'setTemplateTitle',
        'mac_address' => 'setMacAddress',
        'hostname' => 'setHostname',
        'state' => 'setState',
        'state_percent' => 'setStatePercent',
        'state_action' => 'setStateAction',
        'ip_addresses' => 'setIpAddresses',
        'ip6_addresses' => 'setIp6Addresses',
        'start_at' => 'setStartAt',
        'end_at' => 'setEndAt',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'template_id' => 'getTemplateId',
        'template_title' => 'getTemplateTitle',
        'mac_address' => 'getMacAddress',
        'hostname' => 'getHostname',
        'state' => 'getState',
        'state_percent' => 'getStatePercent',
        'state_action' => 'getStateAction',
        'ip_addresses' => 'getIpAddresses',
        'ip6_addresses' => 'getIp6Addresses',
        'start_at' => 'getStartAt',
        'end_at' => 'getEndAt',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_READY = 'READY';
    const STATE_INSTALLING = 'INSTALLING';
    const STATE_FINISH = 'FINISH';
    const STATE_ERROR = 'ERROR';
    const STATE_CANCELLED = 'CANCELLED';
    const STATE_EXPIRED = 'EXPIRED';
    const STATE_TIMEOUT = 'TIMEOUT';
    const STATE_ACTION_STARTING = 'STARTING';
    const STATE_ACTION_DISK_FORMATING = 'DISK_FORMATING';
    const STATE_ACTION_DISK_PARTITIONING = 'DISK_PARTITIONING';
    const STATE_ACTION_DISK_MOUNTING = 'DISK_MOUNTING';
    const STATE_ACTION_NETWORK_SETUP = 'NETWORK_SETUP';
    const STATE_ACTION_BASE_SYSTEM_INSTALLED = 'BASE_SYSTEM_INSTALLED';
    const STATE_ACTION_BASE_SYSTEM_MOUNTING = 'BASE_SYSTEM_MOUNTING';
    const STATE_ACTION_BASE_SYSTEM_UPDATING = 'BASE_SYSTEM_UPDATING';
    const STATE_ACTION_DISK_SETTINGS = 'DISK_SETTINGS';
    const STATE_ACTION_PASSWORD_SETTINGS = 'PASSWORD_SETTINGS';
    const STATE_ACTION_NETWORK_SETTINGS = 'NETWORK_SETTINGS';
    const STATE_ACTION_TIMEZONE_SETTINGS = 'TIMEZONE_SETTINGS';
    const STATE_ACTION_LOCALE_SETTINGS = 'LOCALE_SETTINGS';
    const STATE_ACTION_UTILS_INSTALLING = 'UTILS_INSTALLING';
    const STATE_ACTION_STANDARD_PACKAGES_INSTALLING = 'STANDARD_PACKAGES_INSTALLING';
    const STATE_ACTION_GRUB_INSTALLING = 'GRUB_INSTALLING';
    const STATE_ACTION_CLEAN_UP = 'CLEAN_UP';
    const STATE_ACTION_INSTALLATION_COMPLETED = 'INSTALLATION_COMPLETED';
    const STATE_ACTION_OPERATION_COMPLETED = 'OPERATION_COMPLETED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_READY,
            self::STATE_INSTALLING,
            self::STATE_FINISH,
            self::STATE_ERROR,
            self::STATE_CANCELLED,
            self::STATE_EXPIRED,
            self::STATE_TIMEOUT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateActionAllowableValues()
    {
        return [
            self::STATE_ACTION_STARTING,
            self::STATE_ACTION_DISK_FORMATING,
            self::STATE_ACTION_DISK_PARTITIONING,
            self::STATE_ACTION_DISK_MOUNTING,
            self::STATE_ACTION_NETWORK_SETUP,
            self::STATE_ACTION_BASE_SYSTEM_INSTALLED,
            self::STATE_ACTION_BASE_SYSTEM_MOUNTING,
            self::STATE_ACTION_BASE_SYSTEM_UPDATING,
            self::STATE_ACTION_DISK_SETTINGS,
            self::STATE_ACTION_PASSWORD_SETTINGS,
            self::STATE_ACTION_NETWORK_SETTINGS,
            self::STATE_ACTION_TIMEZONE_SETTINGS,
            self::STATE_ACTION_LOCALE_SETTINGS,
            self::STATE_ACTION_UTILS_INSTALLING,
            self::STATE_ACTION_STANDARD_PACKAGES_INSTALLING,
            self::STATE_ACTION_GRUB_INSTALLING,
            self::STATE_ACTION_CLEAN_UP,
            self::STATE_ACTION_INSTALLATION_COMPLETED,
            self::STATE_ACTION_OPERATION_COMPLETED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['template_title'] = isset($data['template_title']) ? $data['template_title'] : null;
        $this->container['mac_address'] = isset($data['mac_address']) ? $data['mac_address'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['state_percent'] = isset($data['state_percent']) ? $data['state_percent'] : null;
        $this->container['state_action'] = isset($data['state_action']) ? $data['state_action'] : null;
        $this->container['ip_addresses'] = isset($data['ip_addresses']) ? $data['ip_addresses'] : null;
        $this->container['ip6_addresses'] = isset($data['ip6_addresses']) ? $data['ip6_addresses'] : null;
        $this->container['start_at'] = isset($data['start_at']) ? $data['start_at'] : null;
        $this->container['end_at'] = isset($data['end_at']) ? $data['end_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateActionAllowableValues();
        if (!is_null($this->container['state_action']) && !in_array($this->container['state_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state_action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return int
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param int $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets template_title
     *
     * @return string
     */
    public function getTemplateTitle()
    {
        return $this->container['template_title'];
    }

    /**
     * Sets template_title
     *
     * @param string $template_title template_title
     *
     * @return $this
     */
    public function setTemplateTitle($template_title)
    {
        $this->container['template_title'] = $template_title;

        return $this;
    }

    /**
     * Gets mac_address
     *
     * @return string
     */
    public function getMacAddress()
    {
        return $this->container['mac_address'];
    }

    /**
     * Sets mac_address
     *
     * @param string $mac_address mac_address
     *
     * @return $this
     */
    public function setMacAddress($mac_address)
    {
        $this->container['mac_address'] = $mac_address;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Mögliche Werte: READY => Bereit zur Installation INSTALLING => Installation läuft gerade FINISH => Installation abgeschlossen ERROR => Installation fehlgeschlagen CANCELLED => Installation abgebrochen EXPIRED => Installation abgelaufen TIMEOUT => Timeout
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_percent
     *
     * @return int
     */
    public function getStatePercent()
    {
        return $this->container['state_percent'];
    }

    /**
     * Sets state_percent
     *
     * @param int $state_percent state_percent
     *
     * @return $this
     */
    public function setStatePercent($state_percent)
    {
        $this->container['state_percent'] = $state_percent;

        return $this;
    }

    /**
     * Gets state_action
     *
     * @return string
     */
    public function getStateAction()
    {
        return $this->container['state_action'];
    }

    /**
     * Sets state_action
     *
     * @param string $state_action state_action
     *
     * @return $this
     */
    public function setStateAction($state_action)
    {
        $allowedValues = $this->getStateActionAllowableValues();
        if (!is_null($state_action) && !in_array($state_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state_action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state_action'] = $state_action;

        return $this;
    }

    /**
     * Gets ip_addresses
     *
     * @return string[]
     */
    public function getIpAddresses()
    {
        return $this->container['ip_addresses'];
    }

    /**
     * Sets ip_addresses
     *
     * @param string[] $ip_addresses Array mit IPv4-Adressen
     *
     * @return $this
     */
    public function setIpAddresses($ip_addresses)
    {
        $this->container['ip_addresses'] = $ip_addresses;

        return $this;
    }

    /**
     * Gets ip6_addresses
     *
     * @return string[]
     */
    public function getIp6Addresses()
    {
        return $this->container['ip6_addresses'];
    }

    /**
     * Sets ip6_addresses
     *
     * @param string[] $ip6_addresses Array mit IPv6-Adressen
     *
     * @return $this
     */
    public function setIp6Addresses($ip6_addresses)
    {
        $this->container['ip6_addresses'] = $ip6_addresses;

        return $this;
    }

    /**
     * Gets start_at
     *
     * @return \DateTime
     */
    public function getStartAt()
    {
        return $this->container['start_at'];
    }

    /**
     * Sets start_at
     *
     * @param \DateTime $start_at start_at
     *
     * @return $this
     */
    public function setStartAt($start_at)
    {
        $this->container['start_at'] = $start_at;

        return $this;
    }

    /**
     * Gets end_at
     *
     * @return \DateTime
     */
    public function getEndAt()
    {
        return $this->container['end_at'];
    }

    /**
     * Sets end_at
     *
     * @param \DateTime $end_at end_at
     *
     * @return $this
     */
    public function setEndAt($end_at)
    {
        $this->container['end_at'] = $end_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
