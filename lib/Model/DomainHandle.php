<?php
/**
 * DomainHandle
 *
 * PHP version 5
 *
 * @category Class
 * @package  c-sakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RESELLING.SERVICES API
 *
 * Auf folgender Seite finden Sie die Beschreibung der RESELLING.SERVICES Schnittstelle  <!--<a href=\"https://reselling.services/api-docs?lang=en\" title=\"Englische Dokumentation\">Dokumentation in Englisch</a>-->
 *
 * OpenAPI spec version: 1.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace c-sakel\RUBClient\Model;

use \ArrayAccess;
use \c-sakel\RUBClient\ObjectSerializer;

/**
 * DomainHandle Class Doc Comment
 *
 * @category Class
 * @package  c-sakel\RUBClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainHandle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainHandle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'handle' => 'string',
        'type' => 'string',
        'sex' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'organisation' => 'string',
        'street' => 'string',
        'number' => 'string',
        'postcode' => 'string',
        'city' => 'string',
        'region' => 'string',
        'country' => 'string',
        'phone' => 'string',
        'fax' => 'string',
        'email' => 'string',
        'idcard' => 'string',
        'idcardissuedate' => 'string',
        'idcardauthority' => 'string',
        'taxnr' => 'string',
        'vatnr' => 'string',
        'dateofbirth' => 'string',
        'countryofbirth' => 'string',
        'placeofbirth' => 'string',
        'regionofbirth' => 'string',
        'registrationnumber' => 'string',
        'protection' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'handle' => null,
        'type' => null,
        'sex' => null,
        'firstname' => null,
        'lastname' => null,
        'organisation' => null,
        'street' => null,
        'number' => null,
        'postcode' => null,
        'city' => null,
        'region' => null,
        'country' => null,
        'phone' => null,
        'fax' => null,
        'email' => null,
        'idcard' => null,
        'idcardissuedate' => null,
        'idcardauthority' => null,
        'taxnr' => null,
        'vatnr' => null,
        'dateofbirth' => null,
        'countryofbirth' => null,
        'placeofbirth' => null,
        'regionofbirth' => null,
        'registrationnumber' => null,
        'protection' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'handle' => 'handle',
        'type' => 'type',
        'sex' => 'sex',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'organisation' => 'organisation',
        'street' => 'street',
        'number' => 'number',
        'postcode' => 'postcode',
        'city' => 'city',
        'region' => 'region',
        'country' => 'country',
        'phone' => 'phone',
        'fax' => 'fax',
        'email' => 'email',
        'idcard' => 'idcard',
        'idcardissuedate' => 'idcardissuedate',
        'idcardauthority' => 'idcardauthority',
        'taxnr' => 'taxnr',
        'vatnr' => 'vatnr',
        'dateofbirth' => 'dateofbirth',
        'countryofbirth' => 'countryofbirth',
        'placeofbirth' => 'placeofbirth',
        'regionofbirth' => 'regionofbirth',
        'registrationnumber' => 'registrationnumber',
        'protection' => 'protection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'handle' => 'setHandle',
        'type' => 'setType',
        'sex' => 'setSex',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'organisation' => 'setOrganisation',
        'street' => 'setStreet',
        'number' => 'setNumber',
        'postcode' => 'setPostcode',
        'city' => 'setCity',
        'region' => 'setRegion',
        'country' => 'setCountry',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'email' => 'setEmail',
        'idcard' => 'setIdcard',
        'idcardissuedate' => 'setIdcardissuedate',
        'idcardauthority' => 'setIdcardauthority',
        'taxnr' => 'setTaxnr',
        'vatnr' => 'setVatnr',
        'dateofbirth' => 'setDateofbirth',
        'countryofbirth' => 'setCountryofbirth',
        'placeofbirth' => 'setPlaceofbirth',
        'regionofbirth' => 'setRegionofbirth',
        'registrationnumber' => 'setRegistrationnumber',
        'protection' => 'setProtection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'handle' => 'getHandle',
        'type' => 'getType',
        'sex' => 'getSex',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'organisation' => 'getOrganisation',
        'street' => 'getStreet',
        'number' => 'getNumber',
        'postcode' => 'getPostcode',
        'city' => 'getCity',
        'region' => 'getRegion',
        'country' => 'getCountry',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'email' => 'getEmail',
        'idcard' => 'getIdcard',
        'idcardissuedate' => 'getIdcardissuedate',
        'idcardauthority' => 'getIdcardauthority',
        'taxnr' => 'getTaxnr',
        'vatnr' => 'getVatnr',
        'dateofbirth' => 'getDateofbirth',
        'countryofbirth' => 'getCountryofbirth',
        'placeofbirth' => 'getPlaceofbirth',
        'regionofbirth' => 'getRegionofbirth',
        'registrationnumber' => 'getRegistrationnumber',
        'protection' => 'getProtection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['handle'] = isset($data['handle']) ? $data['handle'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['sex'] = isset($data['sex']) ? $data['sex'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['organisation'] = isset($data['organisation']) ? $data['organisation'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['idcard'] = isset($data['idcard']) ? $data['idcard'] : null;
        $this->container['idcardissuedate'] = isset($data['idcardissuedate']) ? $data['idcardissuedate'] : null;
        $this->container['idcardauthority'] = isset($data['idcardauthority']) ? $data['idcardauthority'] : null;
        $this->container['taxnr'] = isset($data['taxnr']) ? $data['taxnr'] : null;
        $this->container['vatnr'] = isset($data['vatnr']) ? $data['vatnr'] : null;
        $this->container['dateofbirth'] = isset($data['dateofbirth']) ? $data['dateofbirth'] : null;
        $this->container['countryofbirth'] = isset($data['countryofbirth']) ? $data['countryofbirth'] : null;
        $this->container['placeofbirth'] = isset($data['placeofbirth']) ? $data['placeofbirth'] : null;
        $this->container['regionofbirth'] = isset($data['regionofbirth']) ? $data['regionofbirth'] : null;
        $this->container['registrationnumber'] = isset($data['registrationnumber']) ? $data['registrationnumber'] : null;
        $this->container['protection'] = isset($data['protection']) ? $data['protection'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle handle
     *
     * @return $this
     */
    public function setHandle($handle)
    {
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sex
     *
     * @return string
     */
    public function getSex()
    {
        return $this->container['sex'];
    }

    /**
     * Sets sex
     *
     * @param string $sex sex
     *
     * @return $this
     */
    public function setSex($sex)
    {
        $this->container['sex'] = $sex;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets organisation
     *
     * @return string
     */
    public function getOrganisation()
    {
        return $this->container['organisation'];
    }

    /**
     * Sets organisation
     *
     * @param string $organisation organisation
     *
     * @return $this
     */
    public function setOrganisation($organisation)
    {
        $this->container['organisation'] = $organisation;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets idcard
     *
     * @return string
     */
    public function getIdcard()
    {
        return $this->container['idcard'];
    }

    /**
     * Sets idcard
     *
     * @param string $idcard idcard
     *
     * @return $this
     */
    public function setIdcard($idcard)
    {
        $this->container['idcard'] = $idcard;

        return $this;
    }

    /**
     * Gets idcardissuedate
     *
     * @return string
     */
    public function getIdcardissuedate()
    {
        return $this->container['idcardissuedate'];
    }

    /**
     * Sets idcardissuedate
     *
     * @param string $idcardissuedate idcardissuedate
     *
     * @return $this
     */
    public function setIdcardissuedate($idcardissuedate)
    {
        $this->container['idcardissuedate'] = $idcardissuedate;

        return $this;
    }

    /**
     * Gets idcardauthority
     *
     * @return string
     */
    public function getIdcardauthority()
    {
        return $this->container['idcardauthority'];
    }

    /**
     * Sets idcardauthority
     *
     * @param string $idcardauthority idcardauthority
     *
     * @return $this
     */
    public function setIdcardauthority($idcardauthority)
    {
        $this->container['idcardauthority'] = $idcardauthority;

        return $this;
    }

    /**
     * Gets taxnr
     *
     * @return string
     */
    public function getTaxnr()
    {
        return $this->container['taxnr'];
    }

    /**
     * Sets taxnr
     *
     * @param string $taxnr taxnr
     *
     * @return $this
     */
    public function setTaxnr($taxnr)
    {
        $this->container['taxnr'] = $taxnr;

        return $this;
    }

    /**
     * Gets vatnr
     *
     * @return string
     */
    public function getVatnr()
    {
        return $this->container['vatnr'];
    }

    /**
     * Sets vatnr
     *
     * @param string $vatnr vatnr
     *
     * @return $this
     */
    public function setVatnr($vatnr)
    {
        $this->container['vatnr'] = $vatnr;

        return $this;
    }

    /**
     * Gets dateofbirth
     *
     * @return string
     */
    public function getDateofbirth()
    {
        return $this->container['dateofbirth'];
    }

    /**
     * Sets dateofbirth
     *
     * @param string $dateofbirth dateofbirth
     *
     * @return $this
     */
    public function setDateofbirth($dateofbirth)
    {
        $this->container['dateofbirth'] = $dateofbirth;

        return $this;
    }

    /**
     * Gets countryofbirth
     *
     * @return string
     */
    public function getCountryofbirth()
    {
        return $this->container['countryofbirth'];
    }

    /**
     * Sets countryofbirth
     *
     * @param string $countryofbirth countryofbirth
     *
     * @return $this
     */
    public function setCountryofbirth($countryofbirth)
    {
        $this->container['countryofbirth'] = $countryofbirth;

        return $this;
    }

    /**
     * Gets placeofbirth
     *
     * @return string
     */
    public function getPlaceofbirth()
    {
        return $this->container['placeofbirth'];
    }

    /**
     * Sets placeofbirth
     *
     * @param string $placeofbirth placeofbirth
     *
     * @return $this
     */
    public function setPlaceofbirth($placeofbirth)
    {
        $this->container['placeofbirth'] = $placeofbirth;

        return $this;
    }

    /**
     * Gets regionofbirth
     *
     * @return string
     */
    public function getRegionofbirth()
    {
        return $this->container['regionofbirth'];
    }

    /**
     * Sets regionofbirth
     *
     * @param string $regionofbirth regionofbirth
     *
     * @return $this
     */
    public function setRegionofbirth($regionofbirth)
    {
        $this->container['regionofbirth'] = $regionofbirth;

        return $this;
    }

    /**
     * Gets registrationnumber
     *
     * @return string
     */
    public function getRegistrationnumber()
    {
        return $this->container['registrationnumber'];
    }

    /**
     * Sets registrationnumber
     *
     * @param string $registrationnumber registrationnumber
     *
     * @return $this
     */
    public function setRegistrationnumber($registrationnumber)
    {
        $this->container['registrationnumber'] = $registrationnumber;

        return $this;
    }

    /**
     * Gets protection
     *
     * @return bool
     */
    public function getProtection()
    {
        return $this->container['protection'];
    }

    /**
     * Sets protection
     *
     * @param bool $protection protection
     *
     * @return $this
     */
    public function setProtection($protection)
    {
        $this->container['protection'] = $protection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
