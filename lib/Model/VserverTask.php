<?php
/**
 * VserverTask
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RESELLING.SERVICES API
 *
 * Auf folgender Seite finden Sie die Beschreibung der RESELLING.SERVICES Schnittstelle  <!--<a href=\"https://reselling.services/api-docs?lang=en\" title=\"Englische Dokumentation\">Dokumentation in Englisch</a>-->
 *
 * OpenAPI spec version: 1.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VserverTask Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VserverTask implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VserverTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'vserver_id' => 'int',
        'start_at' => 'string',
        'end_at' => 'string',
        'type' => 'string',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'vserver_id' => null,
        'start_at' => null,
        'end_at' => null,
        'type' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'vserver_id' => 'vserver_id',
        'start_at' => 'start_at',
        'end_at' => 'end_at',
        'type' => 'type',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'vserver_id' => 'setVserverId',
        'start_at' => 'setStartAt',
        'end_at' => 'setEndAt',
        'type' => 'setType',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'vserver_id' => 'getVserverId',
        'start_at' => 'getStartAt',
        'end_at' => 'getEndAt',
        'type' => 'getType',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_START = 'START';
    const TYPE_RESTART = 'RESTART';
    const TYPE_STOP = 'STOP';
    const TYPE_SHUTDOWN = 'SHUTDOWN';
    const TYPE_DUMP = 'DUMP';
    const TYPE_DUMP_DELETE = 'DUMP_DELETE';
    const TYPE_DUMP_RESTORE = 'DUMP_RESTORE';
    const TYPE_UNINSTALL = 'UNINSTALL';
    const TYPE_INSTALL = 'INSTALL';
    const TYPE_CHANGE_SERVER = 'CHANGE_SERVER';
    const TYPE_RESET = 'RESET';
    const STATE_RUNNING = 'running';
    const STATE_OK = 'OK';
    const STATE_UNEXPECTED_STATUS = 'unexpected status';
    const STATE_JOB_ERRORS = 'job errors';
    const STATE_CT_IS_LOCKED__BACKUP = 'CT is locked (backup)';
    const STATE_MIGRATION_ABORTED = 'migration aborted';
    const STATE_CANCELLED = 'cancelled';
    const STATE_RECEIVED_INTERRUPT = 'received interrupt';
    const STATE_VM_QUITPOWERDOWN_FAILED___GOT_TIMEOUT = 'VM quit/powerdown failed - got timeout';
    const STATE_VM_QUITPOWERDOWN_FAILED = 'VM quit/powerdown failed';
    const STATE_TIMEOUT = 'timeout';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_START,
            self::TYPE_RESTART,
            self::TYPE_STOP,
            self::TYPE_SHUTDOWN,
            self::TYPE_DUMP,
            self::TYPE_DUMP_DELETE,
            self::TYPE_DUMP_RESTORE,
            self::TYPE_UNINSTALL,
            self::TYPE_INSTALL,
            self::TYPE_CHANGE_SERVER,
            self::TYPE_RESET,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_RUNNING
            self::STATE_OK
            self::STATE_UNEXPECTED_STATUS
            self::STATE_JOB_ERRORS
            self::STATE_CT_IS_LOCKED__BACKUP
            self::STATE_MIGRATION_ABORTED
            self::STATE_CANCELLED
            self::STATE_RECEIVED_INTERRUPT
            self::STATE_VM_QUITPOWERDOWN_FAILED___GOT_TIMEOUT
            self::STATE_VM_QUITPOWERDOWN_FAILED
            self::STATE_TIMEOUT
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['vserver_id'] = isset($data['vserver_id']) ? $data['vserver_id'] : null;
        $this->container['start_at'] = isset($data['start_at']) ? $data['start_at'] : null;
        $this->container['end_at'] = isset($data['end_at']) ? $data['end_at'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets vserver_id
     *
     * @return int
     */
    public function getVserverId()
    {
        return $this->container['vserver_id'];
    }

    /**
     * Sets vserver_id
     *
     * @param int $vserver_id vserver_id
     *
     * @return $this
     */
    public function setVserverId($vserver_id)
    {
        $this->container['vserver_id'] = $vserver_id;

        return $this;
    }

    /**
     * Gets start_at
     *
     * @return string
     */
    public function getStartAt()
    {
        return $this->container['start_at'];
    }

    /**
     * Sets start_at
     *
     * @param string $start_at start_at
     *
     * @return $this
     */
    public function setStartAt($start_at)
    {
        $this->container['start_at'] = $start_at;

        return $this;
    }

    /**
     * Gets end_at
     *
     * @return string
     */
    public function getEndAt()
    {
        return $this->container['end_at'];
    }

    /**
     * Sets end_at
     *
     * @param string $end_at end_at
     *
     * @return $this
     */
    public function setEndAt($end_at)
    {
        $this->container['end_at'] = $end_at;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Mögliche Werte: START => Starten RESTART => Neustarten STOP => Stoppen SHUTDOWN => Herunterfahren DUMP => Backup erstellen DUMP_DELETE => Backup löschen DUMP_RESTORE => Backup wiederherstellen UNINSTALL => Rootserver löschen INSTALL => Rootserver installieren CHANGE_SERVER => Server prüfen RESET => Neustarten
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Mögliche Werte: running => Läuft gerade OK => Abgeschlossen unexpected status => Unbekannt job errors => Fehlerhaft CT is locked (backup) => Fehlerhaft - Backup läuft noch migration aborted => Migration abgebrochen cancelled => Abgebrochen received interrupt => Abgebrochen VM quit/powerdown failed - got timeout => Timeout VM quit/powerdown failed => Herunterfahren fehlerhaft timeout => Timeout
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
